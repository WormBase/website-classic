# by Payan Canaran
# config file for update_wormbase-dev.pl
# 
# Make sure enties marked with '***CHECK***' are correctly specified for your system

<params>

	# The root of all WormBase files	
	WORMBASE		/usr/local/wormbase-devel/canaran

	# The BUILD_ROOT_DIR is where all data will be downloaded
	LOCAL_FTP_ROOT_DIR      /usr/local/ftp/pub/wormbase
	BUILD_ROOT_DIR          $LOCAL_FTP_ROOT_DIR/genomes             # *** CHECK ***

	ACEDB_ROOT_DIR		/usr/local/acedb		        # ***CHECK***
	ACEDB_ROOT_GROUP	acedb					# ***CHECK***

	MYSQL_DATA_DIR			/usr/local/mysql		# ***CHECK***      

	SCRIPT_DIR			$WORMBASE/update_scripts	# ***CHECK***
        DUMP_SCRIPT_DIR                 $SCRIPT_DIR/dump_scripts         
	XDFORMAT_SCRIPT                 /usr/local/wublast.WB/xdformat
        PRESSDB_SCRIPT			pressdb	
	SETDB_SCRIPT			setdb
TACE_SCRIPT				tace
	FATONIB_EXEC			/usr/local/blat/bin/faToNib
	GFSERVER_EXEC			/usr/local/blat/bin/gfServer
	CONTACT_EMAIL			webmaster@wormbase.org
	PATH				/bin:/usr/bin:/usr/local/bin:/usr/local/acedb/bin:/usr/local/wublast/bin:/usr/local/wublast:/usr/local/mysql/bin
	REMOVE_MIRROR 			0 # remove/keep mirrored data after copying to FTP site


	# GENERIC FILENAME TEMPLATES
        DNA_TEMPLATE [SPECIES].[RELEASE].dna.fa

	<elegans>
		# STEPS TO PERFORM (STEPS name_of_subroutine:parameter:parameter:...)

# 		STEPS			check_requirements:diskspace
#		STEPS			check_requirements:mysql_access
#		STEPS			check_requirements:write_to_dirs
		STEPS			retrieve_build
#                STEPS                   create_directories
#		STEPS			do_untar
#		STEPS			do_customize
		STEPS			dump_sequences:nucl
		STEPS			make_blastdb:nucl
		STEPS			dump_sequences:prot
		STEPS			make_blastdb:prot
		STEPS			dump_sequences:ests
		STEPS			make_blastdb:ests
		STEPS			load_epcr
#		STEPS			load_gffdb:main
#		STEPS			load_gffdb:pmap
#		STEPS			add_patch
#		STEPS			gff2to3
		STEPS			run_blat_server
### OBSOLETE     STEPS			dump_features:gene_names
#    	        STEPS			dump_features:functional_desc
# 		STEPS			dump_features:swissprot
# 		STEPS			dump_features:go
#                STEPS                   dump_features:gi
# 		STEPS			copy_release_notes
## OBSOLETE 	STEPS			copy_to_ftp
# 		STEPS			archive_files
# 		STEPS			update_symbolic_links:ftp
# 		STEPS			update_symbolic_links:acedb
 		STEPS			update_symbolic_links:databases
		
		# DISKSPACE REQUIREMETS

		DS_REQ_FOR_WORMBASE			0.55
#		DS_REQ_FOR_LOCAL_STORAGE_ROOT_DIR	2
		DS_REQ_FOR_ACEDB_ROOT_DIR		7
		DS_REQ_FOR_BUILD_ROOT_DIR  		3
		DS_REQ_FOR_MYSQL_DATA_DIR		3
		
		# TEMP FILE FOR CHECKING REQUIREMENTS
		
		CHECK_REQ_TEMP_FILE				[LOG_FILE].ce.temp_data
		
		# FTP SERVER FOR DOWNLOADING RAW DATA		
		FTP_SERVER				ftp.sanger.ac.uk 			# Name of the ftp server for downloading raw data
		FTP_ROOT_DIR				/pub/wormbase 				# Directory on the ftp server that contains all release directories
		FTP_RELEASE_DIR				$FTP_ROOT_DIR/[RELEASE]			# Release directory to be mirrored (this is determined at run-time)
		FTP_LATEST_LIVE_DIR	    		$FTP_ROOT_DIR/live_release 		# Latest *live* release directory (or symlink)
		FTP_LATEST_DEV_DIR			$FTP_ROOT_DIR/development_release 	# Latest *DEVELOPMENT* release directory (or symlink)

		# LOCAL STORAGE DIRECTORY TO DOWNLOAD THE DATA				
		BUILD_SPECIES_DIR        		$BUILD_ROOT_DIR/[SPECIES]
		DOWNLOAD_DIR     			$LOCAL_FTP_ROOT_DIR/acedb/[RELEASE]    # Release directory to store downloaded directory (determined at run-time)

		# Stash the current release
		CURRENT_RELEASE           [RELEASE]

		# Filenames / paths of the build directory (archive is sort of a misnomer; also holds post-process output from scripts)		
		# Where post-processed / dumped files go...
		ARCHIVE_GFF2              $BUILD_SPECIES_DIR/genome_feature_tables/GFF2
		ARCHIVE_GFF3              $BUILD_SPECIES_DIR/genome_feature_tables/GFF3
		ARCHIVE_ANNOTATIONS       $BUILD_SPECIES_DIR/annotations
		ARCHIVE_SEQUENCES         $BUILD_SPECIES_DIR/sequences

		# Files to copy out of the raw release into the designated directories
		# These files are all found in the DOWNLOAD_DIR. We copy them out so that
	        # we can archive important files without need to maintain the whole release
		TO_COPY         models.wrm.[RELEASE]                    $LOCAL_FTP_ROOT_DIR/misc/models
		TO_COPY		letter.[RELEASE]			$LOCAL_FTP_ROOT_DIR/misc/release_notes
		TO_COPY     	best_blastp_hits.[RELEASE].gz		$ARCHIVE_ANNOTATIONS/blast_hits
		TO_COPY		best_blastp_hits_brigpep.[RELEASE].gz 	$BUILD_ROOT_DIR/briggsae/annotations/blast_hits
		TO_COPY		wormrna*.tar.gz		  	        $ARCHIVE_SEQUENCES/ncrna
		TO_COPY		wormpep*.tar.gz			        $ARCHIVE_SEQUENCES/protein
		TO_COPY		confirmed_genes.[RELEASE].gz		$ARCHIVE_ANNOTATIONS/confirmed_genes
		TO_COPY         geneIDs.[RELEASE].gz                $ARCHIVE_ANNOTATIONS/gene_IDs
#		TO_COPY         gene_interpolated_map_positions.[RELEASE].gz  $ARCHIVE_ANNOTATIONS/gene_interpolated_map_positions
		TO_COPY         CHROMOSOMES/EST_Elegans.dna.gz          $ARCHIVE_SEQUENCES/mrna/elegans-mrna.[RELEASE].fa.gz


		# LOCAL DIRECTORIES AS RELATIVE TO THE DOWNLOAD_DIR

		CHROMOSOMES_DIR			        /usr/local/wormbase/private/canaran/WS999/CHROMOSOMES # $DOWNLOAD_DIR/CHROMOSOMES
		CHROMOSOMES_MASKED_GLOB			$CHROMOSOMES_DIR/CHROMOSOME*masked*
		CHROMOSOMES_MASKED_DIR			$CHROMOSOMES_DIR/masked
		DNA_UNPACKED_DIR			$CHROMOSOMES_DIR/unpacked
	
		# Log file
		
		UNTAR_LOG_FILE					[LOG_FILE].[TIMESTAMP].ce.untar_database_files

		# ACEDB COMPONENTS TO BE INSTALLED
		
		ACEDB_GROUP                     		$ACEDB_ROOT_GROUP
		ACEDB_DIR					$ACEDB_ROOT_DIR
		ACEDB_RELEASE_DIR				/usr/local/acedb/elegans # $ACEDB_DIR/[SPECIES]_[RELEASE]
		ACEDB_WSPEC_DIR					$ACEDB_RELEASE_DIR/wspec
		SOURCE_WSPEC_DIR				$WORMBASE/wspec

		# BLASTDB CREATION - Directories
		
		BLASTDB_DIR					$WORMBASE/databases/blast/[SPECIES_LONG]
		BLASTDB_RELEASE_DIR				$BLASTDB_DIR/[RELEASE]
		TEMP_ACE_FILE					$BLASTDB_RELEASE_DIR/temp_ace_file.ace

		# BLASTDB CREATION - Dump scripts and File names/command-line

		NUCL_FASTA_FILE					$BLASTDB_RELEASE_DIR/genomic.fa
		NUCL_FASTA_LOG_FILE				[LOG_FILE].[TIMESTAMP].ce.dump_nucl_fasta
		DUMP_NUCL_SCRIPT				$DUMP_SCRIPT_DIR/dump_chromosomes.pl
		NUCL_BLASTDB_TITLE				C elegans genome release [RELEASE]
		NUCL_FORMATDB_LOG_FILE			        [LOG_FILE].[TIMESTAMP].ce.formatdb_nucl
		NUCL_FORMATDB_CMD				$XDFORMAT_SCRIPT -n -t 'NUCL_BLASTDB_TITLE' $NUCL_FASTA_FILE &> $NUCL_FORMATDB_LOG_FILE
		
		ESTS_FASTA_FILE					$BLASTDB_RELEASE_DIR/est.fa
		DUMP_EST_SCRIPT					$DUMP_SCRIPT_DIR/dump_est.pl
		ESTS_BLASTDB_TITLE				C elegans genome release [RELEASE]
		ESTS_FORMATDB_LOG_FILE				[LOG_FILE].[TIMESTAMP].ce.formatdb_ests
		ESTS_FORMATDB_CMD				$XDFORMAT_SCRIPT -n -t 'ESTS_BLASTDB_TITLE' $ESTS_FASTA_FILE &> $ESTS_FORMATDB_LOG_FILE
		
		ESTS_FILE_ZIPPED				$CHROMOSOMES_DIR/EST_Elegans.dna.gz
		ESTS_FILE_UNPACKED				$DNA_UNPACKED_DIR/EST_Elegans.fa

		WORMPEP_PKG					/usr/local/wormbase/private/canaran/WS999/wormpep[RELEASE_ID].tar.gz

		WORMPEP_UNPACKED_DIR				$BLASTDB_RELEASE_DIR/wormpep[RELEASE_ID]
		WORMPEP_FILE_01					$WORMPEP_UNPACKED_DIR/wormpep[RELEASE_ID]
		WORMPEP_FILE_02					$WORMPEP_UNPACKED_DIR/wormpep[RELEASE_ID]/wormpep[RELEASE_ID]
		
		PROT_FASTA_FILE					$BLASTDB_RELEASE_DIR/peptide.fa
		PROT_BLASTDB_TITLE				C elegans WormPep release [RELEASE]
		PROT_FORMATDB_LOG_FILE			[LOG_FILE].[TIMESTAMP].ce.formatdb_prot
		PROT_FORMATDB_CMD				$XDFORMAT_SCRIPT -p -t 'PROT_BLASTDB_TITLE' $PROT_FASTA_FILE &> $PROT_FORMATDB_LOG_FILE 

		# EPCR DB CREATION (Only overlapping chr files in one file)
		
		EPCR_SCRIPT					$SCRIPT_DIR/make_epcr_db.pl
                EPCR_ROOT_DIR					$WORMBASE/databases/epcr/[SPECIES_LONG]
		        EPCR_RELEASE_DIR				$EPCR_ROOT_DIR/[RELEASE]
                EPCR_DESTINATION_FILE				$EPCR_RELEASE_DIR/epcr.fa
                OLIGO_DESTINATION_FILE				$EPCR_RELEASE_DIR/oligo.db
		EPCR_LOG_FILE					[LOG_FILE].[TIMESTAMP].ce.make_epcr_db
		
		# GFF DB CREATION - db access
		
		GFFDB_MYSQL_USER				todd	    #	[NONE] [NULL]          # ***CHECK***
		GFFDB_MYSQL_PASS				kentwashere  #	[NONE] [NULL]          # ***CHECK***

		# GFF DB CREATION - db loading
		
		MAIN_GFFDB_LOAD_DB				elegans_[RELEASE]		# ***CHECK*** was elegans
		MAIN_GFFDB_LIVE_DB				elegans_[RELEASE]		# ***CHECK*** NOT USED
		MAIN_GFFDB_OUTPUT                               $ARCHIVE_GFF2/[SPECIES][RELEASE].gff
		MAIN_GFFDB_SCRIPT				$SCRIPT_DIR/ace2gffdb.pl
		MAIN_GFFDB_LOG					[LOG_FILE].[TIMESTAMP].ce.main_gffdb
		MAIN_GFFDB_CMD					$MAIN_GFFDB_SCRIPT -release [RELEASE] -acedb $ACEDB_RELEASE_DIR -fasta $CHROMOSOMES_DIR -gff $CHROMOSOMES_DIR -load $MAIN_GFFDB_LOAD_DB -live $MAIN_GFFDB_LIVE_DB -user $GFFDB_MYSQL_USER -pass $GFFDB_MYSQL_PASS -output $MAIN_GFFDB_OUTPUT -dna_output $ARCHIVE_SEQUENCES/dna/$DNA_TEMPLATE &> $MAIN_GFFDB_LOG
		
		PMAP_GFFDB_LOAD_DB				elegans_pmap_[RELEASE]		# ***CHECK*** # was elegans_pmap_load
		PMAP_GFFDB_LIVE_DB				elegans_pmap_[RELEASE]		# ***CHECK***
		PMAP_GFFDB_OUTPUT                               $ARCHIVE_GFF2/[SPECIES]_pmap[RELEASE].gff
		PMAP_GFFDB_SCRIPT				$SCRIPT_DIR/pmap2gff.pl
		PMAP_GFFDB_LOG					[LOG_FILE].[TIMESTAMP].ce.pmap_gffdb
		PMAP_GFFDB_CMD					$PMAP_GFFDB_SCRIPT -release [RELEASE] -acedb $ACEDB_RELEASE_DIR -load $PMAP_GFFDB_LOAD_DB -live $PMAP_GFFDB_LIVE_DB -user $GFFDB_MYSQL_USER -pass $GFFDB_MYSQL_PASS -output $PMAP_GFFDB_OUTPUT  &> $PMAP_GFFDB_LOG

		# CREATE AND ADD TEMPORARY PATCHES TO GFF
        # The script /usr/local/wormbase/temporary_patches/current.sh 
        # (i) creates a set of GFF2 files, (ii) creates a gmap MySQL gff database, loads files, (iii) loads files to main gff MySQL database 
        # This section runs the script

		ADD_PATCH_SCRIPT	                $WORMBASE/temporary_patches/current.sh [RELEASE]
		ADD_PATCH_LOG				[LOG_FILE].[TIMESTAMP].ce.add_patch
		ADD_PATCH_CMD				sh $ADD_PATCH_SCRIPT [RELEASE] 2> $ADD_PATCH_LOG

		# GFF DB CONVERSION - GFF2 to GFF3

		GFF2TO3_SCRIPT				        $WORMBASE/util/import_export/wormbasegff2gff3.pl
		GFF2TO3_LOG					[LOG_FILE].[TIMESTAMP].ce.gff2to3
		GFF2TO3_CMD					$GFF2TO3_SCRIPT --sort $ARCHIVE_GFF2/elegans[RELEASE].gff.gz 1> $ARCHIVE_GFF3/elegans[RELEASE].gff3 2> $GFF2TO3_LOG
                GFF2TO3_GZIP_CMD				gzip $ARCHIVE_GFF3/elegans[RELEASE].gff3
		
		# BLAT DB CREATION
		
		BLAT_ROOT_DIR					$WORMBASE/databases/blat/c_elegans
                BLAT_DIR					$BLAT_ROOT_DIR/[RELEASE]
		BLAT_SERVER_HOST				localhost
		BLAT_SERVER_PORT				2003					# ***CHECK***
		FATONIB_LOG_FILE				[LOG_FILE].[TIMESTAMP].ce.fatonib

 		# DUMP A VARIETY OF FEATURES
		# Format:  [NAME] should correspond to the [NAME] in the steps directives
		# [NAME]_SCRIPT
        	# [NAME]_OUTPUT      the output file
		# [NAME]_LOG       the log file
		# [NAME]_CMD       the full command to execute

		
		GENE_NAMES_SCRIPT				$DUMP_SCRIPT_DIR/dump_names.pl
		GENE_NAMES_OUTPUT				$ARCHIVE_ANNOTATIONS/gene_names/gene_names.txt
 		GENE_NAMES_DSN					'database=$MAIN_GFFDB_LIVE_DB;host=localhost'
		GENE_NAMES_LOG					[LOG_FILE].[TIMESTAMP].ce.dump_gene_names
		GENE_NAMES_CMD					($GENE_NAMES_SCRIPT --acedb tace:$ACEDB_RELEASE_DIR -user $GFFDB_MYSQL_USER -pass $GFFDB_MYSQL_PASS -gffdsn $GENE_NAMES_DSN > $GENE_NAMES_OUTPUT) 2> $GENE_NAMES_LOG

		FUNCTIONAL_DESC_SCRIPT				$DUMP_SCRIPT_DIR/dump_functional_descriptions.pl
 		FUNCTIONAL_DESC_OUTPUT				$ARCHIVE_ANNOTATIONS/functional_descriptions/functional_descriptions.[RELEASE].txt
		FUNCTIONAL_DESC_LOG				[LOG_FILE].[TIMESTAMP].ce.dump_functional_descriptions
		FUNCTIONAL_DESC_CMD				($FUNCTIONAL_DESC_SCRIPT --database $ACEDB_RELEASE_DIR > $FUNCTIONAL_DESC_OUTPUT) 2> $FUNCTIONAL_DESC_LOG
		
		SWISSPROT_SCRIPT				$DUMP_SCRIPT_DIR/dump_swissprot.pl
		SWISSPROT_OUTPUT				$ARCHIVE_ANNOTATIONS/SwissProt/SwissProt_mappings.[RELEASE].txt
		SWISSPROT_LOG					[LOG_FILE].[TIMESTAMP].ce.dump_SwissProt_mappings
		SWISSPROT_CMD					($SWISSPROT_SCRIPT -acedb tace:$ACEDB_RELEASE_DIR > $SWISSPROT_OUTPUT) 2> $SWISSPROT_LOG

		GO_SCRIPT					$DUMP_SCRIPT_DIR/dump_go.pl
		GO_OUTPUT					$ARCHIVE_ANNOTATIONS/GO/GO.[RELEASE].txt
		GO_LOG						[LOG_FILE].[TIMESTAMP].ce.dump_GO
		GO_CMD						($GO_SCRIPT $ACEDB_RELEASE_DIR > $GO_OUTPUT) 2> $GO_LOG
 		GO_GENE_LIST					__place_holder__
      
                GI_SCRIPT                                       $DUMP_SCRIPT_DIR/dump_genetic_interactions.pl
                GI_OUTPUT                                       $ARCHIVE_ANNOTATIONS/genetic_interactions/genetic_interactions.[RELEASE].txt
                GI_LOG                                          [LOG_FILE].[TIMESTAMP].ce.dump_GI
                GI_CMD                                          ($GI_SCRIPT $ACEDB_RELEASE_DIR > $GI_OUTPUT) 2> $GI_LOG

		# COPY RELEASE NOTES
		
		LETTER						$DOWNLOAD_DIR/letter.*
		HTML_DIR               		$WORMBASE/html
		RELEASE_NOTES_DIR               $HTML_DIR/release_notes

		# LOCAL FTP DIRECTORY SYMLINKS (LOCAL_SYMLINK ALIAS TARGET) - Make sure these are relative paths
		LOCAL_SYMLINKS          $ARCHIVE_GFF2/current.gff2.gz                           [SPECIES][RELEASE].gff.gz
		LOCAL_SYMLINKS          $ARCHIVE_GFF3/current.gff3.gz                           [SPECIES][RELEASE].gff3.gz
		LOCAL_SYMLINKS          $ARCHIVE_SEQUENCES/dna/current.dna.fa.gz                 elegans.[RELEASE].dna.fa.gz
		LOCAL_SYMLINKS          $ARCHIVE_SEQUENCES/dna/development.dna.fa.gz             elegans.[RELEASE].dna.fa.gz
#		LOCAL_SYMLINKS          $ARCHIVE_SEQUENCES/dna/live.dna.fa.gz                    elegans.[OLD_RELEASE].dna.fa.gz		


		# Raw acedb release
		LOCAL_SYMLINKS              $LOCAL_FTP_ROOT_DIR/acedb/current_release        [RELEASE]			

		# LOCAL ACEDB DIRECTORY SYMLINKS (LOCAL_ACEDB_SYMLINKS ALIAS TARGET)

		LOCAL_ACEDB_SYMLINKS			$ACEDB_DIR/[SPECIES]		$ACEDB_RELEASE_DIR

		# DATABASES_DIR SYMLINKS (DATABASES_DIR_SYMLINKS ALIAS TARGET)

		DATABASES_DIR_SYMLINKS			$BLASTDB_DIR/dev			WS[RELEASE_ID]
		DATABASES_DIR_SYMLINKS			$BLASTDB_DIR/live			WS[PREV_RELEASE_ID]
		DATABASES_DIR_SYMLINKS			$BLASTDB_DIR/current		dev

		DATABASES_DIR_SYMLINKS			$BLAT_ROOT_DIR/dev			WS[RELEASE_ID]
		DATABASES_DIR_SYMLINKS			$BLAT_ROOT_DIR/live			WS[PREV_RELEASE_ID]
		DATABASES_DIR_SYMLINKS			$BLAT_ROOT_DIR/current		dev

		DATABASES_DIR_SYMLINKS			$EPCR_ROOT_DIR/dev			WS[RELEASE_ID]
		DATABASES_DIR_SYMLINKS			$EPCR_ROOT_DIR/live			WS[PREV_RELEASE_ID]
		DATABASES_DIR_SYMLINKS			$EPCR_ROOT_DIR/current		dev

	</elegans>
	
	<briggsae>

		# STEPS TO PERFORM (STEPS name_of_subroutine:parameter:parameter:...)

# 		STEPS			check_requirements:diskspace
#		STEPS			check_requirements:mysql_access
#		STEPS			check_requirements:write_to_dirs
# 		STEPS			retrieve_build
# 		STEPS			do_untar                                    - NOT FOR BRIGGSAE
# 		STEPS			do_customize                                - NOT FOR BRIGGSAE
 		STEPS			dump_sequences:nucl
 		STEPS			make_blastdb:nucl
		STEPS			dump_sequences:prot
 		STEPS			make_blastdb:prot
# 		STEPS			dump_sequences:ests                         - NOT FOR BRIGGSAE
# 		STEPS			make_blastdb:ests                           - NOT FOR BRIGGSAE
# 		STEPS			load_epcr                                   - NOT FOR BRIGGSAE
# 		STEPS			load_gffdb:main
#		STEPS			load_gffdb:pmap                             - NOT FOR BRIGGSAE
#		STEPS			add_patch                                   - NOT FOR BRIGGSAE
#		STEPS			gff2to3                                     - NOT FOR BRIGGSAE
# 		STEPS			run_blat_server
#		STEPS			dump_features:gene_names                    - NOT FOR BRIGGSAE
#		STEPS			dump_features:brief_ids                     - NOT FOR BRIGGSAE
# 		STEPS			dump_features:swissprot                     - NOT FOR BRIGGSAE
#  		STEPS			dump_features:go                            - NOT FOR BRIGGSAE
# 		STEPS			copy_release_notes                          - NOT FOR BRIGGSAE
# 		STEPS			copy_to_ftp
# 		STEPS			update_symbolic_links:ftp
# 		STEPS			update_symbolic_links:acedb                 - NOT FOR BRIGGSAE
# 		STEPS			update_symbolic_links:databases
# 		STEPS			archive_files               				- NOT FOR BRIGGSAE
		
		# DISKSPACE REQUIREMETS

		DS_REQ_FOR_WORMBASE					0.25
		DS_REQ_FOR_BUILD_ROOT_DIR	2
		DS_REQ_FOR_ACEDB_ROOT_DIR			0
		DS_REQ_FOR_MYSQL_DATA_DIR			5
		
		# TEMP FILE FOR CHECKING REQUIREMENTS
		
		CHECK_REQ_TEMP_FILE				[LOG_FILE].cb.temp_data
		
		# FTP SERVER FOR DOWNLOADING RAW DATA
		
		FTP_SERVER				dev.wormbase.org 	# Name of the ftp server for downloading raw data
		FTP_ROOT_DIR				/pub/wormbase 				# Name of the directory in the ftp server that contains all release directories
		FTP_RELEASE_DIR				/pub/wormbase/briggsae-current_release	# Release directory to be mirrored (this is determined at run-time)
		FTP_LATEST_LIVE_DIR	    		/pub/wormbase/briggsae-current_release 	# Latest *live* release directory (this is most likely a symlink but does not have to be)
		FTP_LATEST_DEV_DIR			/pub/wormbase/briggsae-current_release 	# Latest *DEVELOPMENT* release directory (this is most likely a symlink but does not have to be)

		# LOCAL STORAGE DIRECTORY TO DOWNLOAD THE DATA
		BUILD_SPECIES_DIR        	$BUILD_ROOT_DIR/[SPECIES]
		DOWNLOAD_DIR			$LOCAL_FTP_ROOT_DIR/acedb/[RELEASE]    # Release directory to store downloaded directory (determined at run-time)
 				
		# LOCAL DIRECTORIES AS RELATIVE TO THE BUILD_ROOT_DIR (may or may not be on the ftp site directory) 

		CHROMOSOMES_DIR				__place_holder__
		CHROMOSOMES_MASKED_GLOB			__place_holder__
		CHROMOSOMES_MASKED_DIR			__place_holder__

		# Log file
		
		UNTAR_LOG_FILE					__place_holder__

		# ACEDB COMPONENTS TO BE INSTALLED
		
		ACEDB_GROUP                    		 	__place_holder__
		ACEDB_DIR						$ACEDB_ROOT_DIR
		ACEDB_RELEASE_DIR				$ACEDB_DIR/elegans                      # This requires elegans to have run before
		ACEDB_WSPEC_DIR					__place_holder__
		SOURCE_WSPEC_DIR				__place_holder__

		# BLASTDB CREATION - Directories
		
		BLASTDB_DIR					$WORMBASE/databases/blast/[SPECIES_LONG]
		BLASTDB_RELEASE_DIR				$BLASTDB_DIR/[RELEASE]  # This assumes that a CE install is already done. CB blast dbs go into CE blast dir.
		TEMP_ACE_FILE					$BLASTDB_RELEASE_DIR/temp_ace_file.ace

		# BLASTDB CREATION - Dump scripts and File names/command-line

		NUCL_FASTA_FILE					$BLASTDB_RELEASE_DIR/genomic.[SPECIES_LONG].[RELEASE].fa
		NUCL_FASTA_LOG_FILE				[LOG_FILE].[TIMESTAMP].cb.dump_nucl_fasta
		DUMP_NUCL_SCRIPT				__place_holder__
		NUCL_BLASTDB_TITLE				C. briggsae genome, WormBase release [RELEASE]
		NUCL_FORMATDB_LOG_FILE			[LOG_FILE].[TIMESTAMP].cb.formatdb_nucl
		NUCL_FORMATDB_CMD				$XDFORMAT_SCRIPT -n -t 'NUCL_BLASTDB_TITLE' $NUCL_FASTA_FILE &> $NUCL_FORMATDB_LOG_FILE
		
		ESTS_FASTA_FILE					__place_holder__
		DUMP_EST_SCRIPT					__place_holder__
		ESTS_BLASTDB_TITLE				__place_holder__
		ESTS_FORMATDB_LOG_FILE			__place_holder__
		ESTS_FORMATDB_CMD				__place_holder__
		
		ESTS_FILE_ZIPPED				__place_holder__
		ESTS_FILE_UNPACKED				__place_holder__

		WORMPEP_PKG						__place_holder__

		WORMPEP_UNPACKED_DIR			__place_holder__
		WORMPEP_FILE_01					__place_holder__
		WORMPEP_FILE_02					__place_holder__

		PROT_FASTA_FILE					$BLASTDB_RELEASE_DIR/peptide.[SPECIES_LONG].[RELEASE].fa
		PROT_BLASTDB_TITLE				C. briggsae proteins, WormBase release [RELEASE]
		PROT_FORMATDB_LOG_FILE			[LOG_FILE].[TIMESTAMP].cb.formatdb_prot
		PROT_FORMATDB_CMD				$XDFORMAT_SCRIPT -p -t 'PROT_BLASTDB_TITLE' $PROT_FASTA_FILE &> $PROT_FORMATDB_LOG_FILE 

		# EPCR DB CREATION (Only overlapping chr files in one file)
		
		EPCR_SCRIPT					__place_holder__
                EPCR_DESTINATION_FILE				__place_holder__
                OLIGO_DESTINATION_FILE				__place_holder__
		EPCR_LOG_FILE					__place_holder__
		
		# GFF DB CREATION - db access
		
		GFFDB_MYSQL_USER				<user>	    #	[NONE] [NULL]          # ***CHECK***
		GFFDB_MYSQL_PASS				<pass>		#	[NONE] [NULL]          # ***CHECK***

		# GFF DB CREATION - db loading
		
		MAIN_GFFDB_LOAD_DB				briggsae_load			# ***CHECK***
		MAIN_GFFDB_LIVE_DB				briggsae				# ***CHECK***
		MAIN_GFFDB_SCRIPT				$SCRIPT_DIR/briggsae2gffdb.pl
		MAIN_GFFDB_LOG					[LOG_FILE].[TIMESTAMP].cb.main_gffdb
		CB_PARAM_FASTA					[DOWNLOAD_DIR]/gff_db_load_files/run_[RELEASE_ID]/briggsae_[RELEASE_ID].fa.gz   # correct this later when versioning for briggsae is in place
		CB_PARAM_GFF					[DOWNLOAD_DIR]/gff_db_load_files/run_[RELEASE_ID]/briggsae_25.WS121.gff.gz      # correct this later when versioning for briggsae is in place
		MAIN_GFFDB_CMD					$MAIN_GFFDB_SCRIPT -release [RELEASE] -fasta $CB_PARAM_FASTA -gff $CB_PARAM_GFF -load $MAIN_GFFDB_LOAD_DB -live $MAIN_GFFDB_LIVE_DB -user $GFFDB_MYSQL_USER -pass $GFFDB_MYSQL_PASS &> $MAIN_GFFDB_LOG
		
		PMAP_GFFDB_LOAD_DB				__place_holder__
		PMAP_GFFDB_LIVE_DB				__place_holder__
		PMAP_GFFDB_SCRIPT				__place_holder__
		PMAP_GFFDB_LOG					__place_holder__
		PMAP_GFFDB_CMD					__place_holder__

		# CREATE AND ADD TEMPORARY PATCHES TO GFF
        # The script /usr/local/wormbase/temporary_patches/current.sh 
        # (i) creates a set of GFF2 files, (ii) creates a gmap MySQL gff database, loads files, (iii) loads files to main gff MySQL database 
        # This section runs the script

		ADD_PATCH_SCRIPT	        __place_holder__
		ADD_PATCH_LOG				__place_holder__
		ADD_PATCH_CMD				__place_holder__
		
		# GFF DB CONVERSION - GFF2 to GFF3

		GFF2TO3_SCRIPT				        __place_holder__
		GFF2TO3_LOG					__place_holder__
		GFF2TO3_CMD					__place_holder__
                GFF2TO3_GZIP_CMD				__place_holder__
		
		# BLAT DB CREATION
		
		BLAT_ROOT_DIR					$WORMBASE/databases/blat/c_briggsae
		BLAT_DIR						$BLAT_ROOT_DIR/blat_[RELEASE]
		BLAT_SERVER_HOST				localhost
		BLAT_SERVER_PORT				2004					# ***CHECK***
		CB_CHUNK_FASTA					[DOWNLOAD_DIR]/gff_db_load_files/run_[RELEASE_ID]/briggsae_[RELEASE_ID].fa.gz
		CB_CHUNK_FASTA_GUNZIPPED			[DOWNLOAD_DIR]/gff_db_load_files/run_[RELEASE_ID]/briggsae_[RELEASE_ID].fa
		CB_CHUNK_LOG_FILE				[LOG_FILE].[TIMESTAMP].cb.chunk
		FATONIB_LOG_FILE				[LOG_FILE].[TIMESTAMP].cb.fatonib

 		# DUMP FEATURES
		
		GENE_NAMES_SCRIPT				__place_holder__
 		GENE_NAMES_DSN					__place_holder__
		GENE_NAMES_FILE					__place_holder__
		GENE_NAMES_LOG					__place_holder__
		GENE_NAMES_CMD					__place_holder__

		FUNCTIONAL_DESC_SCRIPT				__place_holder__
 		FUNCTIONAL_DESC_FILE			        __place_holder__
		FUNCTIONAL_DESC_LOG                             __place_holder__
		FUNCTIONAL_DESC_CMD					__place_holder__
		
		SWISSPROT_SCRIPT				__place_holder__
		SWISSPROT_FILE					__place_holder__
		SWISSPROT_LOG					__place_holder__
		SWISSPROT_CMD					__place_holder__

		GO_SCRIPT						__place_holder__
 		GO_GENE_LIST					__place_holder__
		GO_FILE							__place_holder__
		GO_LOG							__place_holder__
		GO_CMD							__place_holder__
		
		# COPY RELEASE NOTES
		
		LETTER							__place_holder__
		HTML_DIR               			__place_holder__
		RELEASE_NOTES_DIR               __place_holder__

		# LOCAL FTP DIRECTORY SYMLINKS (LOCAL_SYMLINK ALIAS TARGET) - Make sure these are releative paths

		LOCAL_SYMLINKS				$BUILD_ROOT_DIR/briggsae-current_release	[SPECIES]/[RELEASE]

		# LOCAL ACEDB DIRECTORY SYMLINKS (LOCAL_ACEDB_SYMLINKS ALIAS TARGET)

#		LOCAL_ACEDB_SYMLINKS			__place_holder__		__place_holder__      - NOT FOR BRIGGSAE

		# DATABASES_DIR SYMLINKS (DATABASES_DIR_SYMLINKS ALIAS TARGET)

#		DATABASES_DIR_SYMLINKS			$BLAT_ROOT_DIR/dev			$BLAT_ROOT_DIR/blat_WS[RELEASE_ID]
#		DATABASES_DIR_SYMLINKS			$BLAT_ROOT_DIR/live			$BLAT_ROOT_DIR/blat_WS[PREV_RELEASE_ID]
#		DATABASES_DIR_SYMLINKS			$BLAT_ROOT_DIR/current			$BLAT_ROOT_DIR/dev

		# ARCHIVING
		
		ARCHIVE_ROOT_DIR				__place_holder__
		ARCHIVE_RELEASE_DIR				__place_holder__
		ARCHIVE_RELEASE_SUBDIRS			__place_holder__ __place_holder__ 
		ARCHIVE_FILE					__place_holder__ __place_holder__

	</briggsae>	

</params>
