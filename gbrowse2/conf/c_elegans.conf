[GENERAL]
description = C. elegans (current release)
database    = c_elegans

drag and drop       = 1
cache time          = 1
pad_left          = 180
image_padding     = 100

# where to link to when user clicks in detailed view
link             = /db/get?name=$name;class=$class
initial landmark = III:9060076..9071672

default features = CG Allele LOCI:overview

renderfarm    = 0

# examples to show in the introduction
examples = IV 
	   IV:20,000..30,000 
	   unc-9
	   him-*
           rhodopsin
	   B0019 
	   PCR_product:sjj_B0019.1
           ttattaaacaatttaa
	   
# "automatic" classes to try when an unqualified identifier is given
automatic classes = Transcript Locus Gene GMap PCR_product Operon Genbank Variation Allele CDS Transposon Sequence Clone


# Override the [DETAIL SELECT MENU] from detail_select_menu.conf
# C. elegans has a custom detail select menu.
#include includes/detail_menu-c_elegans.conf

# Plugin configuration
#include includes/plugin.conf

[MotifFinder:plugin]
matrix = matrices.txt

[Aligner:plugin]
alignable_tracks   = ESTB ESTO mRNAB
upcase_tracks      = CDS tRNA NG
align_default      = ESTB
upcase_default     = CDS
#ragged_default     = 10

[OligoFinder:plugin]
search_segments = I II III IV V X

########################
# Default glyph settings
########################
#                  http://206.108.125.174:8101 http://206.108.125.174:8102 http://206.108.125.174:8103
#remote renderer = http://localhost:8101 http://localhost:8102/ http://localhost:8103/
#remote renderer = http://206.108.125.173:8101 http://206.108.125.173:8102 http://206.108.125.173:8103
#remote renderer = http://206.108.125.173:8101 http://206.108.125.173:8102 http://206.108.125.173:8103
#                  http://206.108.125.174:8101 http://206.108.125.174:8102 http://206.108.125.174:8103
#                  http://206.108.125.175:8101 http://206.108.125.175:8102 http://206.108.125.175:8103
#remote renderer = http://206.108.125.173:8101 http://206.108.125.173:8102 http://206.108.125.173:8103
#remote renderer = http://localhost:8101 http://localhost:8102/ http://localhost:8103/ 

[TRACK DEFAULTS]
# wb-gb1: 206.108.125.173 (master)
# wb-gb2: 206.108.125.174 (slave)
#remote renderer = http://206.108.125.174:8101 http://206.108.125.174:8102 http://206.108.125.174:8103
#                  http://206.108.125.173:8101 http://206.108.125.173:8102 http://206.108.125.173:8103
database        = c_elegans
user            = nobody
max segment     = 2000000
forwardcolor    = violet
reversecolor    = turquoise
utr_color       = gainsboro
font2color      = blue


# what to show in the overview section
[LOCI:overview]
feature       = gene:landmark
label         = 1
glyph         = generic
bgcolor       = lavender
key           = Landmarks
height        = 5


#################################
# database definitions
#################################

[c_elegans:database]
db_adaptor  = Bio::DB::GFF
db_args     = -dsn DBI:mysql:c_elegans;user=nobody;host=localhost
passwd      =

# NOTE: aggregators are processed in the order in which they appear, so
# we would like the full transcript to take precedence over RNAs.
#	      waba_alignment 
#	      full_transcript{coding_exon,five_prime_UTR,three_prime_UTR/Transcript}
aggregators = clone 
     	      alignment 
	      full_transcript{coding_exon,five_prime_UTR,three_prime_UTR/Transcript}
	      full_transcript_non_coding{exon,five_prime_UTR,three_prime_UTR/Transcript}
	      curated_gene{coding_exon/CDS}
	      # Not sure which is correct
    	      ngasp_gene{coding_exon,three_prime_UTR,five_prime_UTR}
#    	      ngasp_gene{CDS,three_prime_UTR,five_prime_UTR/Transcript} 
    	      transposon{coding_exon,five_prime_UTR,three_prime_UTR}
	      processed_transcript{coding_exon,five_prime_UTR,three_prime_UTR/CDS}
	      pseudo{exon:Pseudogene,intron:Pseudogene/Pseudogene}
	      RNA{exon/Transcript}
	      coding{coding_exon}
    	      motif_span{motif_segment/Motif}
    	      rnai{RNAi_reagent}
	      ost{expressed_sequence_match}
	      sage_tag{SAGE_tag}
	      wormbase_cds{coding_exon,CDS,five_prime_UTR,three_prime_UTR/CDS}
search options = default +wildcard -stem +fulltext +autocomplete

[modencode_henikoff:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql       
                -dsn    modencode_henikoff       
                -user   nobody            
#search options = exact          
search options = default +wildcard -stem +fulltext +autocomplete


[modencode_hillier_genelets:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_hillier_genelets
                -user   nobody
search options = exact
search options = default +wildcard -stem +fulltext +autocomplete

[modencode_hillier_itranscripts:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_hillier_itranscripts
                -user   nobody
search options = exact


[modencode_lieb:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_lieb
                -user   nobody
search options = exact

[modencode_piano:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_piano
                -user   nobody
search options = exact

[modencode_waterston:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_waterston
                -user   nobody
search options = exact

[modencode_snyder:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_snyder
                -user   nobody
search options = exact

##################################################################################
# the remainder of the sections configure particular tracks to show
##################################################################################

################################################
# GENE MODELS
################################################

[CG]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.
# Core gene model configuration; height, bgcolor, category, key, etc.
#include includes/gene_models.track
#full_transcript:Coding_transcript 
feature = curated_gene:curated
	  pseudo:Pseudogene
          miRNA:miRNA_mature_transcript
          miRNA_primary_transcript:curated_miRNA
	  rRNA_primary_transcript:rRNA
  	  scRNA:scRNA_mature_transcript:scRNA
	  scRNA:scRNA_mature_transcript:exon
  	  snRNA:snRNA_mature_transcript		
	  snoRNA:snoRNA_mature_transcript
	  tRNA_primary_transcript:tRNAscan-SE-1.23 
          tRNA:tRNA_mature_transcript
	  nc_primary_transcript:Non_coding_transcript
	  ncRNA_primary_transcript:ncRNA
          transposon:Transposon_CDS
          transposable_element:Transposon
	  RNA:RNA
# The glyph definition MUST be in the primary configuration file for the species.
# If it is in gene_models.track, the aggregators cannot be found.
glyph    = sub { 
	 my $f = shift;
	 my ($source) = $f->source;
	 return 'transcript2' if $source =~ /pseudogene/i;
	 return 'transcript';
#	 return 'transcript2';
	 return 'wormbase_transcript';
	 }
title    = Curated gene set $name
label    = sub { 
		my $feature = shift;
#		my $desc = join ' ',$feature->attribute('Locus');
		my $desc = $feature->attributes('Locus');
		my $name = $feature->display_name;
#		my $gene = $feature->Gene;
		return $desc =~ /(\w{3,4}-\d+\.?\d*)$/ ? "$1 ($name)" : $name;
	}
description  = sub {	     
	my $feature = shift;
	my $notes = join ' ',$feature->notes;
	$notes = 'pseudogene' if $feature->source =~ /pseudogene/i;
	return $notes;
       }
citation = These are gene predictions that have been reviewed by WormBase curators.  The
	purple and blue colors indicate CDS regions on the forward and
	reverse strands respectively.  The grey areas represent 5' and
	3' ESTs assigned automatically using the extents of
	overlapping ESTs and full-length cDNAs.  The UTR predictions
	have <b>not</b> been reviewed by WormBase curators, and are
	known to contain artifacts. If sufficient room is available
	between features, gene models end with a triangle; if not a
	small arrow is used.  The tRNAs are predicted by Sean Eddy's
	tRNAscan program, and miRNA transcripts taken from a variety
	of literature sources.

[CG:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0


[CODING_TRANSCRIPTS]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.
# Core gene model configuration; height, bgcolor, category, key, etc.
category     = Genes
key          = Coding Transcripts
# Which of these?
feature = full_transcript:Coding_transcript 
#feature = protein_coding_primary_transcript:Coding_transcript
#	  pseudo:Pseudogene
#         miRNA:miRNA_mature_transcript
#         miRNA_primary_transcript:curated_miRNA
#	  rRNA_primary_transcript:rRNA
#  	  scRNA:scRNA_mature_transcript:scRNA
#	  scRNA:scRNA_mature_transcript:exon
#  	  snRNA:snRNA_mature_transcript		
#	  snoRNA:snoRNA_mature_transcript
#	  tRNA_primary_transcript:tRNAscan-SE-1.23 
#         tRNA:tRNA_mature_transcript
#	  nc_primary_transcript:Non_coding_transcript
#	  ncRNA_primary_transcript:ncRNA
#         transposon:Transposon_CDS
#         transposable_element:Transposon
#	  RNA:RNA
##	  full_transcript_non_coding:Non_coding_transcript
#        	 exon:curated_miRNA
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
balloon hover  = sub {my $f = shift;
	                my $name = $f->name; 
                        my $class = $f->class;
    		        "url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG";
	} 
link = sub {
	my $f = shift;
	return if $f->method eq 'RNAz';
	my $name = $f->attributes('Gene') || $f->name;
	return "/db/get?name=$name;class=Gene";
	}
# The glyph definition MUST be in the primary configuration file for the species.
# If it is in gene_models.track, the aggregators cannot be found.
glyph    = sub { 
	 my $f = shift;
	 my ($source) = $f->source;
	 return 'transcript2' if $source =~ /pseudogene/i;
	 return 'wormbase_transcript';
	 }
title    = Coding transcript $name
label    = sub { 
		my $feature = shift;
		my $desc = join ' ',$feature->notes;
		my $name = $feature->display_name;
		return $desc =~ /(\w{3,4}-\d+\.?\d*)$/ ? "$1 ($name)" : $name;
	}
description  = sub {	     
	my $feature = shift;
	my $notes = join ' ',$feature->notes;
	return $notes;
       }
citation = These are gene predictions that have been reviewed by WormBase curators.  The
	purple and blue colors indicate CDS regions on the forward and
	reverse strands respectively.  The grey areas represent 5' and
	3' ESTs assigned automatically using the extents of
	overlapping ESTs and full-length cDNAs.  The UTR predictions
	have <b>not</b> been reviewed by WormBase curators, and are
	known to contain artifacts. If sufficient room is available
	between features, gene models end with a triangle; if not a
	small arrow is used.  The tRNAs are predicted by Sean Eddy's
	tRNAscan program, and miRNA transcripts taken from a variety
	of literature sources.

[CODING_TRANSCRIPTS:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[CDS]
feature      = coding:Coding_transcript
#include includes/cds.track


# [RNAZ]
# feature      = RNAz:ncRNA
# category     = Genes
# glyph        = transcript
# bgcolor      = white
# fgcolor      = black
# bgcolor      = white
# fgcolor      = black
# key          = RNAz non-coding RNA genes
# citation     = RNAz-derived ncRNAs were predicted using
#               the <a href="http://www.tbi.univie.ac.at/~wash/RNAz/">RNAz algorithm</a>.
# link         = AUTO




[CG_HISTORY]
feature  = wormbase_cds:history
glyph    = wormbase_transcript
title    = Historical gene prediction $name
category     = Genes
key          = Gene Models (historical)
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
balloon hover  = sub {my $f = shift;
	                my $name = $f->name; 
                        my $class = $f->class;
    		        "url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG";
	} 
label    = sub { 
		my $feature = shift;
		my $desc = join ' ',$feature->notes;
		my $name = $feature->display_name;
		return $desc =~ /(\w{3,4}-\d+\.?\d*)$/ ? "$1 ($name)" : $name;
	}
description  = sub {	     
	my $feature = shift;
	my $notes = join ' ',$feature->notes;
	my $source = $feature->source;
	$source =~ s/scan-SE.*$//;  # get rid of SE-1.11 part
	$source =~ s/Coding_transcript//;  # No longer using curated coding gene
	$notes =~ s/\w{3,4}-\d+$//;   # name is already in label
        return "$notes; $source";
    }
citation = Historical gene predictions.

[CG_HISTORY:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0


################################################
# DNA
################################################
#include includes/dna.track




[RNA]
feature      =  RNAz:ncRNA
                miRDeep:ncRNA
category     = Genes
glyph        = sub {
		my $feature = shift;
		return 'transcript';
	}
bgcolor      = white
fgcolor      = black
forwardcolor = violet
reversecolor = cyan
utr_color    = gray
font2color   = blue
label        = sub { 
		my $feature = shift;
		my $desc = join ' ',$feature->notes;
		my $name = $feature->display_name;
		return $desc =~ /(\w{3,4}-\d+\.?\d*)$/ ? "$1 ($name)" : $name;
	}
description  = sub {
	my $feature = shift;
	my $notes = join ' ',$feature->notes;
	my $source = $feature->source;
	$notes =~ s/\w{3,4}-\d+$//;   # name is already in label
        return "$notes ($source)" if $notes && $source; 
        return $notes        if $notes && $feature->name !~ /^$notes/; 
        return "($source)"   if $source; 
        return ''; 
    }
balloon hover =  url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG
key          = RNAz non-coding RNA genes
# key          = Predicted non-coding RNAs
link        = sub {
	my $f = shift;
	return if $f->method eq 'RNAz';
	}
citation     = RNAz-derived ncRNAs were predicted using
        the <a href="http://www.tbi.univie.ac.at/~wash/RNAz/">RNAz algorithm</a>.
        Please select the RNA for more details.



[HISTORICAL]
feature      = processed_transcript:history
glyph        = transcript
bgcolor      = white
description  = sub { 
		my $f = shift;
		my $name = $f->display_name;
		my ($wp)   = $name =~ /wp(\d+)$/;
		return $wp ? "(changed; WormPep WP$wp)" : "(obsolete)";
	}
citation     = This track shows historical gene models that have been superseded.  The 
		suffix indicates which WormPep release the gene model was last present
		in.
category     = Genes
key          = Obsolete gene models

[HISTORICAL:75000]
bgcolor      = white
glyph        = generic
strand_arrow = 1

[GENEFINDER]
feature      = processed_transcript:genefinder
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = GeneFinder Predictions

[GENEFINDER:75000]
feature      = CDS:genefinder
key          = GeneFinder Predictions

[TWINSCAN]
feature      = processed_transcript:twinscan
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = Twinscan Predictions
link         = sub { return undef; }         
 
[TWINSCAN:75000]   
feature      = CDS:twinscan
key          = Twinscan Predictions
link         = sub { return undef; }

[GENEMARKHMM]
feature      = processed_transcript:GeneMarkHMM
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = GeneMarkHMM Predictions
link         = sub { return undef; }         
citation     = These are GeneMarkHMM gene predictions provided by Mark Borodovsky. 


[GENEMARKHMM:75000]   
feature      = CDS:GeneMarkHMM
key          = GeneMarkHMM Predictions
link         = sub { return undef; }

[MGENE]
feature      = processed_transcript:mGene
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = mGene Predictions
link         = sub { return undef; }         
 
[MGENE:75000]   
feature      = CDS:mGene
key          = mGene Predictions
link         = sub { return undef; }


[JIGSAW]
feature      = processed_transcript:jigsaw
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = mGene Predictions
link         = sub { return undef; }         
 
[JIGSAW:75000]   
feature      = CDS:jigsaw
key          = Jigsaw Predictions
link         = sub { return undef; }


[mSPLICER_TRANSCRIPT]
feature      = processed_transcript:mSplicer_transcript
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = mSplicer
link         = sub { return undef; }         
citation     = mSplicer predict the splice forms for a given start and
	       end of a transcript. (Note that it is not yet a
               full-featured gene-finder.) There are two versions:
               1. "mSplicer" which splices general pre-mRNA (including
               UTR or coding regions) without assuming the existence of a
               reading frame (requires transcription start and stop).
               2. "mSplicer-ORF" is optimized for coding regions and
               requires the knowledge of the translation start and stop.
               These predictions were generated against regions annotated
               in WS160. More details can be found at <a href="http://www.fml.mpg.de/raetsch/projects/msplicer">http://www.fml.mpg.de/raetsch/projects/msplicer</a>.

[mSPLICER_TRANSCRIPT:75000]   
feature      = Transcript:mSplicer_transcript
link         = sub { return undef; }

[mSPLICER_ORF]
feature      = processed_transcript:mSplicer_orf
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = mSplicer-ORF
link         = sub { return undef; }         
citation     = mSplicer predict the splice forms for a given start and
	       end of a transcript. (Note that it is not yet a
               full-featured gene-finder.) There are two versions:
               1. "mSplicer" which splices general pre-mRNA (including
               UTR or coding regions) without assuming the existence of a
               reading frame (requires transcription start and stop).
               2. "mSplicer-ORF" is optimized for coding regions and
               requires the knowledge of the translation start and stop.
               These predictions were generated against regions annotated
               in WS160. More details can be found at <a href="http://www.fml.mpg.de/raetsch/projects/msplicer">http://www.fml.mpg.de/raetsch/projects/msplicer</a>.

[mSPLICER_ORF:75000]   
feature      = CDS:mSplicer_orf
link         = sub { return undef; }


[OP]
feature      = operon:operon
glyph        = generic
category     = Genes
strand_arrow = 1
bgcolor      = green
height       = 10
description  = 1
key          = Operons
citation     = These are operons published by Blumenthal et al, Nature 417: 851-854 (2002).

[OP_DEPRECATED]
feature      = operon:deprecated_operon
glyph        = generic
category     = Genes
strand_arrow = 1
bgcolor      = green
height       = 10
description  = 1
key          = Operons (deprecated)
citation     = These are historical operon predictions.



[TS]
feature      = SL1_acceptor_site SL2_acceptor_site
category     = Genes
glyph        = triangle
#glyph        = sub {
#		my $feature = shift;
#		return $feature->source eq 'SL1' ? 'diamond' : 'triangle';
#	}
point        = 1
orient       = sub {
	my $feature = shift;
	my $strand  = $feature->strand;
	return 'E' if $strand > 0;
	return 'W';
	}
bgcolor      = sub {
	    my $feature = shift;
            return $feature->source eq 'SL1' ? 'red' : 'green';
	}
font2color   = 'red';
height       = 8
label        = 0
label density = 100
description  = sub {
		shift->source;
	}
key          = Trans-spliced acceptor
citation     = These are SL1 and SL2 trans-spliced acceptors published by Blumenthal et al, Nature 417: 851-854 (2002).

# This track shows the approximate physical span of genetic intervals
[GENETIC]
feature       = gene:interpolated_pmap_position
		gene:absolute_pmap_position
# WS227 and beyond
#feature       = gene:interpolated_pmap_position
#		gene:absolute_pmap_position
key           = Genetic limits
category      = Genes
glyph         = sub {
                    my $f = shift;
                    return ($f->source eq 'interpolated_pmap_position') ? 'span' : 'box';
       }
fgcolor       = black
bgcolor       = sub { my $feature = shift;
		      return ($feature->source eq 'interpolated_pmap_position') ? 'red' : 'turquoise';
	}
link          = sub { my $f   = shift;
                      my $name = $f->name;
   	              return "/db/get?name=$name;class=Gene";
	}
height        = 3
label         = sub { return shift->name; }
description = sub { my $feature = shift;
	              my $notes = join(' ',$feature->notes);
	              $notes =~ /^\s*(\-?\d{1,2}\.\d*)\s(.*)/;
		      # Reduce sig figs to three
	              my $pos  = $1;
		      my $rest = $2;
     	              $rest =~ s/uncloned|cloned//;  # Remove the status descriptor	
		      $pos  = sprintf("%2.3f",$pos);
		      my $formatted = "$pos $rest";
		      return $formatted;
        }
citation      = This track shows the maximal extents for genetic loci.  
		Loci that have been interpolated onto the physical
                map (and whose precise location is unknown) are shown 
                as a thin black span.  The physical extent of such loci are determined 
                by interpolating their genetic position onto the physical 
                map using 95% confidence limits.  Please note that the actual 
                location of such loci may lay outside of the span depicted.
                Loci with known sequence connections are shown in turquoise 
                and depicted using the physical span of the gene.

[MOTIFS]
# Individual spans
# feature     = motif_segment:translated_feature
# Single, full length spans
# feature     = Motif:translated_feature
# Aggregated features (skip top level feature)
#feature       = motif:translated_feature
feature       = motif_span:translated_feature
key           = Protein motifs
category      = Misc
glyph         = segments
connector     = dashed
connector_color = gray
fgcolor       = black
bgcolor       = sub {
		my $feature = shift;
		my $name = $feature->name;
                return 'magenta'          if ($name =~ /tmhmm/);
                return 'lightseagreen'     if ($name =~ /seg/);
	        return 'aquamarine'    if ($name =~ /signalp/);
       		return 'chartreuse'    if ($name =~ /ncoils/);
		return 'lightsalmon'         if ($name =~ /pfam/);
	}
link          = sub { my $f   = shift;
     		my %notes = map { split /=/ } $f->notes;
                #my $name = $f->name;
                #my ($target) = $name =~ /(WP_.*)\-.*/;
		#$target =~ s/_/:/g;
                return "/db/get?name=$notes{Protein};class=Protein";
        }
height        = 7
label         = sub { 
		my $f = shift;
		my $name = $f->name;
		#my ($label) = $name =~ /(WP_.*-.*)\.\d/;
                #my ($label) = $name =~ /(.*)\-.*\.\d$/;
		#$label =~ s/_/:/;
		my %notes = map { split /=/ } $f->notes;
		my $label = $notes{Type};
		return $label;
	}
description = sub { my $feature = shift;
		my %notes = map { split /=/ } $feature->notes;
#		my $desc = "$notes{CDS}; aa: $notes{Range}; exon(s): $notes{Exons}";
#		$desc .= "; $notes{Description}" if $notes{Description};
#		my $desc = $notes{Type};
#		$desc .= "; $notes{Description}" if $notes{Description};
		my $desc = $notes{Description};
		return $desc;
	}
citation      = This track shows the extent of predicted protein motifs. Note these
                spans correspond to amino acid coordinates interpolated onto the
                physical map.  Included are signal peptide (signalp), coiled coil (ncoils)
		and transmembrane (tmhmm) domains, regions of low complexity (seg),
                and Pfam annotated motif homologies. 

[G4_MOTIF]
feature       = G-quartet:pmid18538569
category      = Misc
bgcolor       = magenta
fgcolor       = black
height        = 7
connector     = none
key           = G4 Motif
citation      = This track shows the extent of G4 DNA signature. G4 motif is "Intrinsically mutagenic motif, probably
         because it can form secondary structures during DNA replication". Data are from Kruisselbrink E et al. (2008)
         Curr Biol "Mutagenic Capacity of Endogenous G4 DNA Underlies Genome Instability in ....".
 

[MASS_SPEC]
# Individual spans
feature      = translated_nucleotide_match:mass_spec_genome
# Single, full length spans
# feature     = Motif:translated_feature
# Aggregated features (skip top level feature)
key           = Mass spec peptides
category      = Misc
glyph         = segments
draw_target   = 1
show_mismatch = 1
ragged_start  = 1
connector     = dashed
connector_color = gray
fgcolor       = black
bgcolor       = sub {
		my $feature = shift;
		my $name = $feature->name;
		return 'red';
	}
link          = sub { my $f   = shift;
                my $name = $f->name;
                return "/db/get?name=$name;class=Mass_spec_peptide";
        }
height        = 7
label         = sub { 
		my $f = shift;
		my $name = $f->name;
		$name =~ s/^MSP://;
		return $name;
	}
#group_pattern = /^Mass_spec_peptide:[.*]/
description  = sub { return undef; }
#description = sub { 
#		my $f = shift;
#		my $exons = $f->attributes('Exons_covered');
#		return $exons;
#}
#title   = sub {
#		my $f = shift;
#		return $f->attributes('Exons_covered');
#	}
citation      = This track shows peptides identified in mass spec proteomics
                experiments.

[MASS_SPEC:50000]
feature       = similarity:mass_spec_genome

# Removed at the request of Kevin, 2012.01.12
#[WABA]
#feature       = waba_alignment
#bgcolor       = blue
#glyph         = heterogeneous_segments
#draw_target   = 1
#show_mismatch = 1
#realign       = 0
#category     = Sequence Similarity Tracks
#waba_weak_color   = gainsboro
#waba_strong_color = cornflowerblue
#waba_coding_color = blue
#fgcolor       = black
#height        = 6
#connector     = dashed
#box_subparts  = 0
#key           = Briggsae alignments
#label = sub {	my $feature = shift;
#		my $ref   = $feature->target;
#		my $start = $feature->target->start;
#		my $stop  = $feature->target->end;
#	        my $first = ($feature->segments)[0];
#                my $strand = defined $first && $first->start>$first->end ? -1 : +1;
#		($start,$stop) = ($stop,$start) if $strand < 0;
#	        "$ref:$start..$stop";
#	}
#citation      = These are segments of the C. briggsae rough draft sequence that have been
#	aligned to the C. elegans genome using Jim Kent's WABA program [Kent & Zahler, 
#	Genome Res 10:1115-25 (2000)].
#	WABA distinguishes between low similarity regions (light blue), high-similarity regions
#	(medium blue), and regions of high similarity that have the characteristic wobble-base
#	mismatch of coding regions (dark blue).  Also see "Briggsae Alignments (BLAST)".
#	IMPORTANT NOTE:  Briggsae sequence is available from the GSC BLAST server at 
#	<a href="http://genome.wustl.edu/gsc/Blast/client.pl">http://genome.wustl.edu/gsc/Blast/client.pl</a> and the Sanger BLAST server
#	at <a href="http://www.sanger.ac.uk/Projects/C_briggsae/blast_server.shtml">http://www.sanger.ac.uk/Projects/C_briggsae/blast_server.shtml</a>.
#link = 	sub {
#		my $feature = shift;
#		my $ref   = $feature->target;
#		my $start = $feature->start;
#		my $stop  = $feature->end;
#	        my $first = ($feature->segments)[0];
#                my $strand = defined $first && $first->start>$first->end ? -1 : +1;
#		($start,$stop) = ($stop,$start) if $strand < 0;
#		return "http://dev.wormbase.org/db/seq/gbrowse_syn/pecan?search_src=elegans;name=$ref:$start..$stop";
#	}
#title = View this region in the synteny browser

#[WABA:100000]
#feature       = nucleotide_match:waba_weak nucleotide_match:waba_strong nucleotide_match:waba_coding
#glyph         = generic
#bgcolor       = #E0E0E0


[SYNTENY]
feature       = similarity:synteny
bgcolor       = sub { 
  		  my $f = shift;
	          my ($s) = $f->attributes('Species');
		  warn "SPECIES = $s\n";
		  return $s =~ /briggsae/ ? 'green' : $s =~ /remanei/ ? 'red' : 'purple';
                }
#glyph         = segments
draw_target   = 1
show_mismatch = 1
realign       = 0
category     = Sequence Similarity Tracks
fgcolor       = black
height        = 6
connector     = dashed
box_subparts  = 0
key           = PECAN syntenic alignents
label = sub {	my $feature = shift;
		my $ref   = $feature->target;
		my $start = $feature->target->start;
		my $stop  = $feature->target->end;
	        my $first = ($feature->segments)[0];
                my $strand = defined $first && $first->start>$first->end ? -1 : +1;
		($start,$stop) = ($stop,$start) if $strand < 0;
		my ($species) = $feature->attributes('species');
	        "$ref:$start..$stop ($species)";
	}
citation      = PECAN alignments
link = 	sub {
		my $feature = shift;
		my $ref   = $feature->target;
		my $start = $feature->start;
		my $stop  = $feature->end;
	        my $first = ($feature->segments)[0];
                my $strand = defined $first && $first->start>$first->end ? -1 : +1;
		($start,$stop) = ($stop,$start) if $strand < 0;
		return "http:///mckay.cshl.edu/cgi-bin/gbrowse_syn?name=$ref:$start..$stop;src=compara;search_src=elegans";
	}
title = sub {
		my $f = shift;
		my ($species) = $f->attributes('Species');
		return "PECAN alignment to <i>$species</i>.<br> Click to view this region in the synteny browser";
	}


[SYNTENY:100000]
feature       = similarity:synteny
glyph         = generic
bgcolor       = #E0E0E0

[ESTB:50000]
feature   = EST_match:BLAT_EST_BEST
#feature   = alignment:BLAT_EST_BEST

[ESTB:7000]
label     = 

[ESTB:101]
fontcolor     = black
height        = 5

[ESTB]
feature       = alignment:BLAT_EST_BEST
glyph         = segments
category     = Sequence Similarity Tracks
das category = transcription
draw_target   = 1
show_mismatch = 1
ragged_start  = 1
height        = 5
bgcolor       = limegreen
fgcolor       = black
mismatch_color = yellow
connector     = solid
group_pattern = /\.[35]$/
key           = ESTs aligned by BLAT (best)
citation      = These are C. elegans expressed sequence tags (ESTs), that have been aligned to
	the C. elegans genome using Jim Kent's BLAT program [<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">
	http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].
	This track shows the best unique location for each EST.  Other EST matches, some
	of which may represent repetitive elements, are	shown in the track labeled
	"ESTs aligned by BLAT (other)".
	The paired 5' and 3' ESTs from the same cDNA clone are connected by a dashed line.

[ESTO]
feature       = alignment:BLAT_EST_OTHER
glyph         = segments
category     = Sequence Similarity Tracks
draw_target   = 1
show_mismach  = 1
ragged_start  = 1
bgcolor       = lightgray
fgcolor       = black
height        = 6
connector     = solid
group_pattern = /\.[35]$/
key           = ESTs aligned by BLAT (other)
citation      = These are C. elegans expressed sequence tags (ESTs), that have been aligned to
	the C. elegans genome using Jim Kent's BLAT program [<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].
	This track shows ESTs that align multiple times, some of which represent repetitive
	regions.  For the "best" match, see the track labeled "ESTs aligned with BLAT (best)".
	The paired 5' and 3' ESTs from the same cDNA clone are connected by a dashed line.

[ESTO:50000]
feature      = EST_match:BLAT_EST_OTHER
#feature      = alignment:BLAT_EST_OTHER



[mRNAB]
feature       = alignment:BLAT_mRNA_BEST alignment:BLAT_ncRNA_BEST
glyph         = segments
category     = Sequence Similarity Tracks
label         = sub {
                my $f = shift;
		my $label = ($f->source =~ /BLAT_mRNA_BEST/) ? 'mRNA' : 'ncRNA';        
	        my $name = $f->name;
		return "$label: $name";
	}
draw_target   = 0
show_mismach  = 1
ragged_start  = 1
bgcolor       = sub {
                my $f = shift;
		return 'yellow' if ($f->source =~ /BLAT_mRNA_BEST/);
		return 'grey';
               }
fgcolor       = black
height        = 6
connector     = solid
#key           = mRNAs/ncRNAs aligned by BLAT (best)
key           = RNAs aligned by BLAT (best)
citation      = These are C. elegans full length cDNAs and ncRNAs that have been aligned to
	the C. elegans genome using Jim Kent's BLAT program [<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].
	This track shows the best unique location for each cDNA.  Other cDNA matches, some
	of which may represent repetitive elements, are	shown in the track labeled
	"RNAs aligned by BLAT (other)".
#citation      = These are C. elegans full length cDNAs and ncRNAs that have been aligned to
#	the C. elegans genome using Jim Kent's BLAT program [<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].
#	This track shows the best unique location for each cDNA.  Other cDNA matches, some
#	of which may represent repetitive elements, are	shown in the track labeled
#	"mRNAs/ncRNAs aligned by BLAT (other)".

[mRNAO]
feature       = alignment:BLAT_mRNA_OTHER alignment:BLAT_ncRNA_OTHER
glyph         = segments
category     = Sequence Similarity Tracks
label         = sub {
                my $f = shift;
		my $label = ($f->source =~ /BLAT_mRNA_OTHER/) ? 'mRNA' : 'ncRNA';        
	        my $name = $f->name;
		return "$label: $name";
	}
draw_target   = 1
show_mismach  = 1
ragged_start  = 1
bgcolor       = sub {
                my $f = shift;
		return 'green' if ($f->source =~ /BLAT_mRNA_OTHER/);
		return 'grey';
               }
fgcolor       = black
height        = 5
connector     = solid
#key           = mRNAs/ncRNAs aligned by BLAT (other)
key           = RNAs aligned by BLAT (other)
citation      = These are C. elegans full length cDNAs, that have been aligned to
	the C. elegans genome using Jim Kent's BLAT program [<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].
	This track shows non-unique matches, which may represent repetitive sequences.
	For the best single alignment, see the track labeled
	"RNAs aligned by BLAT (best)".


[CAENORHABDITIS_ESTS_AND_MRNAS_BEST]
feature       = alignment:BLAT_Caen_EST_BEST
	        alignment:BLAT_Caen_mRNA_BEST
glyph         = segments
category     = Sequence Similarity Tracks
bgcolor       = sub {
		my $f = shift;
		my $source = $f->source;;
		return 'lightblue' if $source eq 'BLAT_Caen_mRNA_BEST';
		return 'green'     if $source eq 'BLAT_Caen_EST_BEST';
	}
title   = sub {
                my $f = shift;
#		my $ace = ElegansSubs::OpenDatabase();
#                my $obj = $ace->fetch(Sequence => $f->name);
#    	        return $obj->name;
#	        return $obj->Species->name;
		return $f->attributes('Species');
	}
label         = 0
fgcolor       = black
height        = 4
connector     = solid
key           = Nematode ESTs and mRNAs (Caenorhabditis; best)
link      = sub {
		my $f = shift;
		my $source = $f->source;
		my $name = $f->name;
		return "/db/get?name=$name;class=Sequence";
	}
citation      = This track shows ESTs and mRNAs from the Caenorhabditis 
                species C. briggsae, C. remanei, and C. japonica aligned to the C.
                elegans genome using Jim Kent's BLAT program [<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].
        <p>mRNAs are shown in light blue; ESTs in green.

[CAENORHABDITIS_ESTS_AND_MRNAS_BEST:50000]
feature   = translated_nucleotide_match:BLAT_Caen_EST_BEST
	    translated_nucleotide_match:BLAT_Caen_mRNA_BEST


[CAENORHABDITIS_ESTS_AND_MRNAS_OTHER]
feature       = alignment:BLAT_Caen_EST_OTHER
	        alignment:BLAT_Caen_mRNA_OTHER
glyph         = segments
category     = Sequence Similarity Tracks
bgcolor       = sub {
		my $f = shift;
		my $source = $f->source;;
		return 'lightblue' if $source eq 'BLAT_Caen_mRNA_OTHER';
		return 'green'     if $source eq 'BLAT_Caen_EST_OTHER';
	}
title   = sub {
                my $feature = shift;
#		my $ace = ElegansSubs::OpenDatabase();
#                my $obj = $ace->fetch($feature->class => $feature->name);
#	        return $obj->Species;
		return $feature->attributes('Species');
	}
fgcolor       = black
height        = 4
connector     = solid
key           = Nematode ESTs and mRNAs (Caenorhabditis; other)
label         = 0
link      = sub {
		my $f = shift;
		my $source = $f->source;
		my $name = $f->name;
		return "/db/get?name=$name;class=Sequence";
	}
citation      = This track shows ESTs and mRNAs from the Caenorhabditis 
                species C. briggsae, C. remanei, and C. japonica aligned to the C.
                elegans genome using Jim Kent's BLAT program [<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].
	This track shows non-unique matches, which may represent repetitive sequences.
	For the best single alignment, see the track labeled
	"Caenorhabditis ESTs and mRNAS (best)".
        <p>mRNAs are shown in light blue; ESTs in green.

[CAENORHABDITIS_ESTS_AND_MRNAS_OTHER:50000]
feature   = translated_nucleotide_match:BLAT_Caen_EST_OTHER
	    translated_nucleotide_match:BLAT_Caen_mRNA_OTHER


[NEMATODE_ESTS]
feature       = alignment:BLAT_NEMATODE
	        alignment:BLAT_WASHU
	        alignment:BLAT_NEMBASE
glyph         = segments
category     = Sequence Similarity Tracks
bgcolor       = sub {
		my $f = shift;
		my $source = $f->source;;
		return 'lightblue' if $source eq 'BLAT_NEMATODE';
		return 'green'     if $source eq 'BLAT_WASHU';
		return 'red'       if $source eq 'BLAT_NEMBASE';
	}
title   = sub {
		my $f = shift;
		return $f->attributes('Species');
	}
fgcolor       = black
height        = 4
connector     = solid
key           = Nematode ESTs (non-Caenorhabditis)
link      = sub {
		my $f = shift;
		my $source = $f->source;
		my $name = $f->name;
		return "http://zeldia.cap.ed.ac.uk/nematodeESTs/cluster.php?cluster=$name" 
			if ($source eq 'BLAT_NEMBASE');
		return "http://nematode.net/NN3_frontpage.cgi?navbar_selection=nemagene&subnav_selection=FromWB&TYPE=contig&NAME=$name"
			if ($source eq 'BLAT_WASHU');
		return "/db/get?name=$name;class=Sequence";
	}
citation      = This track contains non-C. elegans ESTs aligned to 
		the C. elegans genome.
		<p>
		ESTs show in red are provided by <a href="http://nema.cap.ed.ac.uk/nematodeESTs/nembase.html">NEMBASE</a>. NEMBASE
		is a publicly available online database providing access to the sequence and
		associated meta-data currently being generated as part of the
		University of Edinburgh-Wellcome Trust Sanger Institute parasitic  nematode EST
		programme. NEMBASE currently holds ~120 000 putative genes, and high- quality
		protein translations, predicted from ~400000 clustered ESTs from 37  different
		species of nematode. Users may query the database on the basis of
		BLAST annotation, sequence similarity or expression profiles.
		<p>
		ESTs show in green are provided by <a href="http://www.nematode.net">Nematode.net</a>
		Nematode.net is a web-accessible resource for
		investigating gene sequences from nematode genomes. The database is an
		outgrowth of the parasitic nematode EST project at Washington
		University's Genome Sequencing Center (GSC), St Louis. More
		than 295 000 ESTs have been generated from >30 nematodes other than
		Caenorhabditis elegans including key parasites of humans, animals and
		plants. Nematode.net currently provides NemaGene EST cluster consensus
		sequence, enhanced online BLAST search tools, functional
		classifications of cluster sequences and comprehensive information
		concerning the ongoing generation of nematode genome data.
		<p>
		ESTs shown in light blue  are non-C. elegans nematode ESTs 
		that have been aligned to the C. elegans genome using Jim Kent's
		BLATX program [<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].

[NEMATODE_ESTS:50000]
feature   = translated_nucleotide_match:BLAT_NEMATODE
	    translated_nucleotide_match:BLAT_WASHU
	    translated_nucleotide_match:BLAT_NEMBASE

[RNAi_BEST]
#feature       = RNAi_reagent:RNAi_primary RNAi_reagent:RNAi_secondary experimental_result_region:cDNA_for_RNAi
#feature       = RNAi_reagent:RNAi_primary
feature       = rnai:RNAi_primary experimental_result_region:cDNA_for_RNAi
glyph         = segments
category      = Phenotype/Expression Tracks
bgcolor       = goldenrod
fgcolor       = black
height        = 4
label         = sub {
		my $f = shift;
		my $name   = $f->attributes('History_name');		
		my $string = $name ? $name : $f->name;
		return $string;
	}
description    = sub {
		my $f = shift;
		my $source = $f->attributes('Laboratory');
		my $string = $source ? "source lab: $source" : '';
		return $string;
	}
key           = RNAi experiments (primary targets)
citation      = This track represents RNAi probes that have been aligned to the genome
                using a combination of BLAST and BLAT programs and have sequence identity
                to the target location of at least 95% over a stretch of at least 100 nt.
                Probes that satisfy these criteria are almost certain to produce RNAi
                effect on overlapping genes and the corresponding locations are usually
                the primary genomic targets of an RNAi experiment. Note that it is possible
                for a probe to have multiple primary targets within the genome. Click on the
                RNAi element to get more information about the experiment.

[RNAi_OTHER]
#feature       = RNAi_reagent:RNAi_secondary
feature       = rnai:RNAi_secondary
category      = Phenotype/Expression Tracks
glyph         = segments
bgcolor       = red
fgcolor       = black
height        = 4
label         = sub {
		my $f = shift;
		my $name   = $f->attributes('History_name');		
		my $string = $name ? $name : $f->name;
		return $string;
	}
description    = sub {
		my $f = shift;
		my $source = $f->attributes('Laboratory');
		my $string = $source ? "source lab: $source" : '';
		return $string;
	}
key           = RNAi experiments (secondary targets)
citation      = This track represents RNAi probes that have been aligned to the genome 
                using BLAST program and have sequence identity to the target location 
                from 80 to 94.99% over a stretch of at least 200 nt. Probes that satisfy
                these criteria may or may not produce RNAi effect on overlapping genes
                and the corresponding locations represent possible secondary 
                (unintended) genomic targets of an RNAi experiment. Click on the RNAi 
                element to get more information about the experiment.

[SAGE]
feature       = sage_tag
glyph	      = transcript2
arrow_length  = 2
orient        = sub {
	          my $f = shift;
		  return $f->strand > 0 ? 'E' : 'W';
                }
strand_arrow  = 1
height        = 7
description   = sub {
		  my $f = shift;
		  return 0 if $f->source eq 'SAGE_tag';
		  my $name = $f->name;
		  $name =~ s/SAGE://;
	  	  return $name;
	  	}
bgcolor       = sub {
                  my $f = shift;
		  return 'lightgrey' if $f->source eq 'SAGE_tag';                
		  return $f->strand > 0 ? 'violet' : 'turquoise';
	       }
fgcolor       = sub {
                  my $f = shift;
                  return 'lightgrey' if $f->source eq 'SAGE_tag';
                  return $f->strand > 0 ? 'violet' : 'turquoise';
               }
label         = sub {
		  my $f = shift;
	          return '' if $f->source eq 'SAGE_tag';
		  my ($cnt)  = $f->attributes('count');
	          my ($gene) = $f->attributes('Gene', 'Transcript', 'Pseudogene');
		  return "$gene count:$cnt" if $gene && $cnt; 
  		}
category      = Phenotype/Expression Tracks
key           = SAGE tags
link          = sub {
                  my $f = shift;
	          my $name = $f->name;
	          return "/db/seq/sage?name=$name;class=SAGE_tag";
               }
citation      = This track indicates the location of Serial Analysis of Gene Expression (SAGE)
        patterns associated with a tag and its associated genes.  Tags shown in grey are
	either unambiguously mapped to a gene elsewhere or are ambigous due to multiple occurences
	in genomic or trascript sequences.  Colored tags are mapped unambiguously to a single
        gene or genomic location.  Violet and turquoise refer to the plus strand and minus 
        strands, respectively.  The number shown above tags is the total number of times
        this tag was observed in all SAGE experiments.

[SAGE:7001]
arrow_length  = 3

[SAGE:10001]
arrow_length  = 5
label         = sub {
                  my $f = shift;
                  return 0 if $f->source eq 'SAGE_tag';
                  my ($cnt) = $f->attributes('count');
		  return "$cnt "; #must not be '1'
                }

[TECRED]
feature  = nucleotide_match:TEC_RED
glyph    = box
bgcolor  = red
category = Phenotype/Expression Tracks
height   = 5
key      = TEC-RED tags
citation = Trans-spliced Exon Coupled RNA End Determination (TEC-RED) tags. TEC-RED uses a method similar to SAGE to identify expressed genes and characterize the 5' end of transcripts.

[EXPR]
feature       = experimental_result_region:Expr_profile
category      = Phenotype/Expression Tracks
bgcolor       = orange
fgcolor       = black
height        = 4
key           = Expression chip profiles
citation      = This track indicates the location of PCR products that have been placed on
	expression chips produced by the C. elegans Microarray Consortium [
	<a href="http://cmgm.stanford.edu/~kimlab/wmdirectorybig.html">http://cmgm.stanford.edu/~kimlab/wmdirectorybig.html</a>]. 
	The genes corresponding to these products have been clustered by their
	expression patterns.  Click on the profile to get more information about the expression
	profile of its corresponding gene.


[EXPR_PATTERN]
feature       = reagent:Expr_pattern
glyph         = sub {
		  my $name = shift->name;
		  my $png = -e "/usr/local/wormbase/website-shared-files/images/expression/assembled/$name.png";
	          return $png ? 'image' : 'span';
                }
glyph_delegate = span
image         = sub {
                  my $f = shift;
                  my $flip = $f->strand > 0 ? ';flip=1' : '';
                  my $name = $f->name;	
                  "/db/gene/expression?name=$name;draw=1;thumb=250$flip";
                }
link          = /db/gene/expression?name=$name
balloon hover = sub {
	          my $name   = shift->name;
		  my $length = shift->length;
		  my $png = -e "/usr/local/wormbase/website-shared-files/images/expression/assembled/$name.png";
                  my $cartoon = $length > 99999 && $png ? ';cartoon=1' : '';
		  "url:/db/misc/gbrowse_popup?name=$name;type=EXPR_PATTERN$cartoon";
		}
category      = Phenotype/Expression Tracks
bgcolor       = silver
fgcolor       = black
height        = 8
key           = Expression patterns
fontcolor     = blue
label         = sub {
                  my $f = shift;
#                  my $ace = ElegansSubs::OpenDatabase();
#                  my $obj = $ace->fetch($f->class => $f->name);
#                  my ($gene) = ElegansSubs::Bestname($obj->Gene);
#                  my ($construct) = $obj->Transgene;
#                  $gene .= " ($construct)" if $construct;
#                  $gene;
                }
citation      = This track represents sequences that were used for in vivo expression pattern analysis,
                such as promoter sequences for GFP or LacZ constructs.  Colored areas in the worm
                image represent approximate regions where adult or late larval expression has been
                documented via Anatomy Ontology terms.  The strand of the sequence (promoter) region
                used is indicated by color in the same way as genes, where violet is the forward
                strand and turqoise is the reverse strand.  Clicking on the worm image will take you
                to a detailed view of the expression pattern.


[EXPR_PATTERN:40000]
image         = sub {"/db/gene/expression?draw=1;thumb=225;name=".shift->name}
[EXPR_PATTERN:60000]
image         = sub {"/db/gene/expression?draw=1;thumb=200;name=".shift->name}
[EXPR_PATTERN:80000]
image         = sub {"/db/gene/expression?draw=1;thumb=175;name=".shift->name}
[EXPR_PATTERN:100000]
glyph         = span


[Allele]
feature      = sequence_variant:Allele
	       Allele:Allele
	       deletion:Allele
               substitution:Allele
	       insertion:Allele
#	       transposable_element_insertion_site:Allele
	       complex_change_in_nucleotide_sequence:Allele
	       deletion:CGH_allele
category      = Variation Tracks
label        = sub {
	     my $f = shift;
	     my $name = $f->attributes('Public_name') || $f->name;
	     return $name;
	      }	      
glyph        = sub {
		my $f = shift;
		return 'triangle' if $f->method eq 'transposable_element_insertion_site';
		return 'box'  if $f->method =~ /complex_change/i;
#		return 'lightning'  if $f->method eq 'substitution';
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;
		my $s = $f->method;
		return 'red'  if $f->source eq 'CGH_allele';
		return 'red'    if $s eq 'deletion';
		return 'yellow' if $s eq 'substitution';
		return 'blue'   if $s eq 'transposable_element_insertion_site';
		return 'blue'   if $s =~ /complex_change/i;
		return 'blue'   if $f->length <= 3;
		return 'white';
	}
fgcolor      = black
font2color   = blue
height       = 8
description  = sub {
		my $f = shift;
		my $s = $f->method;
		return 'cgh'           if $f->source eq 'CGH_allele';
		return 'deletion'      if $s eq 'deletion';
		return 'transposon insertion' if $s eq 'transposable_element_insertion_site';
		return 'insertion'          if $s eq 'insertion';
		return 'insertion/deletion' if $s =~ /complex_change/i;
	        return 'allele'             if $f->length <= 3;
 	}
key          = Alleles
citation      = This track shows alleles. Red boxes are deletion alleles
	<a href="http://elegans.bcgsc.bc.ca/knockout.shtml">Knockout Consortium</a>
	deletion alleles.   Triangles are transposon element insertion sites.
	White boxes represent other types of alleles. 


[TRANSPOSONS]
feature      = transposable_element_insertion_site:Mos_insertion_allele
               transposable_element_insertion_site:Allele
category     = Variation Tracks
label        = sub {
	     my $f = shift;
	     my $name = $f->attributes('Public_name') || $f->name;
	     return $name;
	      }	      
glyph        = sub {
		my $f = shift;
		return 'triangle' if $f->method eq 'Mos_insertion_allele';
		return 'triangle' if $f->method eq 'transposable_element_insertion_site';
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;
		my $s = $f->method;
		return 'yellow' if $f->source eq 'Mos_insertion_allele';
		return 'blue'   if $s eq 'transposable_element_insertion_site';
		return 'blue'   if $f->length <= 3;
		return 'white';
	}
fgcolor      = black
font2color   = blue
height       = 8
description  = sub {
		my $f = shift;
		my $s = $f->method;
		return 'Mos insertion' if $f->source eq 'Mos_insertion_allele';
		return 'deletion'      if $s eq 'deletion';
		return 'transposon insertion' if $s eq 'transposable_element_insertion_site';
		return 'insertion'          if $s eq 'insertion';
		return 'insertion/deletion' if $s =~ /complex_change/i;
 	}
key          = Transposon insertions
citation     = This track shows transposon insertion sites engineered by
               Laurent Segalat and others 
               [<a href="/db/misc/paper?name=%5Bwm99ab757%5D;class=Paper">Alvarez et al.</a>, Towards a genome-wide collection of transposon insertions, International C. elegans Meeting 1999 #757].
	      Yellow triangles are Mos-derived transposon insertions; 
              blue triangles are Tc* derived transposon insertions.


[SNPs]
feature      = SNP:Allele
category     = Variation Tracks
label        = sub {
	     my $f = shift;
	     my $name = $f->attributes('Public_name') || $f->name;
	     return $name;
	      }	      
glyph        = sub {
		my $f = shift;
		# Some SNPs come out length 3. Dunno why.
		return 'diamond'  if $f->length <= 3;
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;	
		my $status = $f->attributes('Status');
		my $rflp   = $f->attributes('RFLP');

		# Confirmed, RFLP SNPs
		if ($rflp eq 'Yes' && $status =~ /confirmed/i) {
			return 'green';
		# Confirmed, sequence detectable SNPs
		} elsif ($rflp eq 'No' && $status =~ /confirmed/i) {
			return 'yellow';  
	        } else {
   	        # Predicted SNPs
			return 'red';
		}
	}	
fgcolor      = black
font2color   = blue
height       = sub {
	       my $f = shift;
	       	  my $status = $f->attributes('Status');
                my $rflp   = $f->attributes('RFLP');
                # Confirmed, RFLP SNPs
                if ($rflp eq 'Yes' && $status =~ /confirmed/i) {
                        return 14;
                } else {
                        return 8;
                }
        }
description  = sub {
		my $f = shift;
		my $status = $f->attributes('Status');
		my $rflp   = $f->attributes('RFLP');
		my $label  = $rflp eq 'Yes' ? 'RFLP' : 'SNP';
		# Fudge factor.  Let's call the SNP verified if it has an 
                # allele-like designation or is an exilixis uCE allele
		my $description = $status =~ /confirmed/i ? 'verified' : 'predicted';
		$description = 'verified' if ($f->name =~ /^uCE/); 
		return "$label ($description)";
 	}
key          = SNPs
citation     = This track shows confirmed and predicted single nucleotide polymorphisms (SNPs). 
               Confirmed SNPs that generate an RFLP (a Snip-SNP) are shown in green. Confirmed SNPs
               sequence-detectable SNPs are shown in yellow, and predicted SNPs are shown in red.



[MILLION_MUTATION_PROJECT]
feature      = SNP:Million_mutation
category     = Variation Tracks
label        = sub {
	     my $f = shift;
	     return $f->attributes('Public_name') || $f->name;
	      }	      
glyph        = sub {
		my $f = shift;
		# Some SNPs come out length 3. Dunno why.
		return 'diamond'  if $f->length <= 3;
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;	
		my $protein_effect   = $f->attributes('Mutation_type');
		if ($protein_effect) { 
			return 'green';	
	        } else {
			return 'red';
		}
	}	
fgcolor      = black
font2color   = blue
height       = 10
link      = sub {
                my $f = shift;
                my $name = $f->name;
                return "/db/get?name=$name;class=Variation";
		       }
description = SNP # Parity with existing SNPs
balloon hover = sub {
	my $f = shift;
	my $name = $f->attributes('Public_name');
	my $mutation_type = $f->attributes('Mutation_type');
	my $substitution  = $f->attributes('Substitution');
	my $aachange      = $f->attributes('AAChange');	
	my $strain        = $f->attributes('Strain');
	my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
	my @notes = ("$ref:$start..$stop",$substitution);
	push @notes,"$mutation_type $aachange" if $mutation_type;
	push @notes,"strain $strain";
	my $string = "Million Mutation SNP $name [" . join('; ',@notes) . ']';
	return $string;
	}
key          = Million Mutation Project
citation     = This track shows SNPs from the The Million Mutation Project (Waterston/Moerman).
               SNPs that are predicted to disrupt a gene are shown in green, those that do not
               in red.

[PCR]
feature       = PCR_product
bgcolor       = violet
glyph         = primers
category      = Reagents
fgcolor       = black
connect       = 1
connect_color = cyan
key           = PCR Assays
citation      = This track indicates the location of primer pairs that have been created by a number
	of groups.  Click on the element to obtain the left and right oligo sequences, information
	about the amplification information, and ordering information (if available). 

[PolyA]
feature      = polyA_signal_sequence polyA_site
glyph        = sub {
		my $f = shift;
		return 'diamond' if $f->method =~ /signal/;
		return 'triangle';
	}
category     = Genes
point        = 1
orient       = N
bgcolor      = violet
description  = sub { my $s = shift->source; $s=~tr/_/ /; $s; }
key          = polyA sites and signal sequences
citation     = High-confidence polyadenylation signal sequences and sites calculated by an algorithm trained with verified sites from full-length mRNAs.


[PredSeqFeature]
feature      = misc_feature:binding_site
               PicTar:binding_site
               miRanda:binding_site
               cisRed:binding_site
glyph        = sub {
		my $f = shift;
		return 'diamond' if $f->method =~ /signal/;
		return 'box';
	}
category      = Misc
#point        = 1
#orient       = N
bgcolor      = sub {
	my $f = shift;
	my $method = $f->method;
	return 'blue' if $f->method eq 'PicTar';
	return 'red'  if $f->method eq 'miRanda';
	return 'green';
	}
key        = Binding sites (Predicted)
#description  = sub {
#	my $f  = shift;
#	my $desc = join('; ',$f->notes);
#	return $desc;
#	}
link      = sub {
		my $f = shift;
		my $method = $f->method;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     =~ /Predicted binding site for (.*)/;
		my $gene = $1;
		return "/db/get?name=$gene;class=Gene" if $gene =~ /\w{3,4}?-\d+?/;
		return "http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $method eq 'PicTar';
		return "http://microrna.sanger.ac.uk/targets/v3/" if $method eq 'miRanda'; 
		return "/db/get?name=$name;class=Feature";
		return;
	}
label     = sub {
		my $f = shift;
		my $method=  $f->method;
		my $name = $f->name;
		return "$name (DNA binding site)" if $method eq 'misc_feature';
		# Name is actually stored in notes for most features as a single note
		my $notes = $f->notes;
		$notes = $name if($notes eq '');
		return "$method: $notes";
#		return join('; ',$f->notes);
	}    
title     = sub {
		my $f = shift;
		my $method =  $f->method;
		my $name = $f->name;
		return "External data: See http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $method eq 'PicTar';
		return "External data: See http://microrna.sanger.ac.uk/targets/v3/" if $method eq 'miRanda';				
		return $name;
	}    
citation     = 
	This track shows curated and predicted binding sites for
        transcription factors and microRNAs. Binding sites (indicated
        in green) are extracted from published data and includes
        experimentally confirmed binding sites as well as computationally
        derived potential bind targets. miRanda predictions -- indicated
        in red -- are the predicted target sequences for microRNA genes,
        provided by <a href="http://microrna.sanger.ac.uk/targets/v3/">
        Anton Enright's group</a> using the 
        <a href="http://www.microrna.org/miranda_new.html">miRanda
        program</a>. <a href="http://pictar.bio.nyu.edu/">PicTar predictions</a> -- indicated in blue -- 
        are the predicted target sequences for microRNA genes from 
        Lall et al; A genome-wide map of conserved microRNA targets in 
        C. elegans. Curr Biol. 2006 Mar 7;16(5):460-71.

[CuratedSeqFeature]
feature      = binding_site:binding_site     
glyph        = sub {
		my $f = shift;
		return 'diamond' if $f->method =~ /signal/;
		return 'box';
	}
category      = Misc
#point        = 1
#orient       = N
bgcolor      = sub {
	my $f = shift;
	my $method = $f->method;
	return 'blue' if $f->method eq 'PicTar';
	return 'red'  if $f->method eq 'miRanda';
	return 'green';
	}
key        = Binding sites (Curated)
#description  = sub {
#	my $f  = shift;
#	my $desc = join('; ',$f->notes);
#	return $desc;
#	}
link      = sub {
		my $f = shift;
		my $method = $f->method;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     =~ /Predicted binding site for (.*)/;
		my $gene = $1;
		return "/db/get?name=$gene;class=Gene" if $gene =~ /\w{3,4}?-\d+?/;
		return "http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $method eq 'PicTar';
		return "http://microrna.sanger.ac.uk/targets/v3/" if $method eq 'miRanda'; 
		return "/db/get?name=$name;class=Feature";
		return;
	}
label     = sub {
		my $f = shift;
		my $method=  $f->method;
		my $name = $f->name;
		return "$name (DNA binding site)" if $method eq 'misc_feature';
		# Name is actually stored in notes for most features as a single note
		my $notes = $f->notes;
		$notes = $name if($notes eq '');
		return "$method: $notes";
#		return join('; ',$f->notes);
	}    
title     = sub {
		my $f = shift;
		my $method =  $f->method;
		my $name = $f->name;
		return "External data: See http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $method eq 'PicTar';
		return "External data: See http://microrna.sanger.ac.uk/targets/v3/" if $method eq 'miRanda';				
		return $name;
	}    
citation     = 
	This track shows curated and predicted binding sites for
        transcription factors and microRNAs. Binding sites (indicated
        in green) are extracted from published data and includes
        experimentally confirmed binding sites as well as computationally
        derived potential bind targets. miRanda predictions -- indicated
        in red -- are the predicted target sequences for microRNA genes,
        provided by <a href="http://microrna.sanger.ac.uk/targets/v3/">
        Anton Enright's group</a> using the 
        <a href="http://www.microrna.org/miranda_new.html">miRanda
        program</a>. <a href="http://pictar.bio.nyu.edu/">PicTar predictions</a> -- indicated in blue -- 
        are the predicted target sequences for microRNA genes from 
        Lall et al; A genome-wide map of conserved microRNA targets in 
        C. elegans. Curr Biol. 2006 Mar 7;16(5):460-71.


[BindingRegSeqFeature]
feature      = binding_site:binding_site_region                    
glyph        = sub {
		my $f = shift;
		return 'diamond' if $f->method =~ /signal/;
		return 'box';
	}
category      = Misc
#point        = 1
#orient       = N
bgcolor      = sub {
	my $f = shift;
	my $method = $f->method;
	return 'blue' if $f->method eq 'PicTar';
	return 'red'  if $f->method eq 'miRanda';
	return 'green';
	}
key        = Binding Regions
#description  = sub {
#	my $f  = shift;
#	my $desc = join('; ',$f->notes);
#	return $desc;
#	}
link      = sub {
		my $f = shift;
		my $method = $f->method;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     =~ /Predicted binding site for (.*)/;
		my $gene = $1;
		return "/db/get?name=$gene;class=Gene" if $gene =~ /\w{3,4}?-\d+?/;
		return "http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $method eq 'PicTar';
		return "http://microrna.sanger.ac.uk/targets/v3/" if $method eq 'miRanda'; 
		return "/db/get?name=$name;class=Feature";
		return;
	}
label     = sub {
		my $f = shift;
		my $method=  $f->method;
		my $name = $f->name;
		return "$name (DNA binding site)" if $method eq 'misc_feature';
		# Name is actually stored in notes for most features as a single note
		my $notes = $f->notes;
		$notes = $name if($notes eq '');
		return "$method: $notes";
#		return join('; ',$f->notes);
	}    
title     = sub {
		my $f = shift;
		my $method =  $f->method;
		my $name = $f->name;
		return "External data: See http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $method eq 'PicTar';
		return "External data: See http://microrna.sanger.ac.uk/targets/v3/" if $method eq 'miRanda';				
		return $name;
	}    
citation     = 
	This track shows curated and predicted binding sites for
        transcription factors and microRNAs. Binding sites (indicated
        in green) are extracted from published data and includes
        experimentally confirmed binding sites as well as computationally
        derived potential bind targets. miRanda predictions -- indicated
        in red -- are the predicted target sequences for microRNA genes,
        provided by <a href="http://microrna.sanger.ac.uk/targets/v3/">
        Anton Enright's group</a> using the 
        <a href="http://www.microrna.org/miranda_new.html">miRanda
        program</a>. <a href="http://pictar.bio.nyu.edu/">PicTar predictions</a> -- indicated in blue -- 
        are the predicted target sequences for microRNA genes from 
        Lall et al; A genome-wide map of conserved microRNA targets in 
        C. elegans. Curr Biol. 2006 Mar 7;16(5):460-71.


#[SeqFeature]
#feature      = misc_feature:binding_site
#               PicTar:binding_site
#               miRanda:binding_site                     
#glyph        = sub {
#		my $f = shift;
#		return 'diamond' if $f->method =~ /signal/;
#		return 'box';
#	}
#category      = Misc
##point        = 1
##orient       = N
#bgcolor      = sub {
#	my $f = shift;
#	my $method = $f->method;
#	return 'blue' if $f->method eq 'PicTar';
#	return 'red'  if $f->method eq 'miRanda';
#	return 'green';
#	}
#key        = Binding sites
##description  = sub {
##	my $f  = shift;
##	my $desc = join('; ',$f->notes);
##	return $desc;
##	}
#link      = sub {
#		my $f = shift;
#		my $method = $f->method;
#		my $name   = $f->name;
#		my $notes  = $f->notes;
#		$notes     =~ /Predicted binding site for (.*)/;
#		my $gene = $1;
#		return "/db/get?name=$gene;class=Gene" if $gene =~ /\w{3,4}?-\d+?/;
#		return "http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $method eq 'PicTar';
#		return "http://microrna.sanger.ac.uk/targets/v3/" if $method eq 'miRanda'; 
#		return "/db/get?name=$name;class=Feature";
#		return;
#	}
#label     = sub {
#		my $f = shift;
#		my $method=  $f->method;
#		my $name = $f->name;
#		return "$name (DNA binding site)" if $method eq 'misc_feature';
#		# Name is actually stored in notes for most features as a single note
#		my $notes = $f->notes;
#		return "$method: $notes";
##		return join('; ',$f->notes);
#	}    
#title     = sub {
#		my $f = shift;
#		my $method =  $f->method;
#		my $name = $f->name;
#		return "External data: See http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $method eq 'PicTar';
#		return "External data: See http://microrna.sanger.ac.uk/targets/v3/" if $method eq 'miRanda';				
#		return $name;
#	}    
#citation     = 
#	This track shows curated and predicted binding sites for
#        transcription factors and microRNAs. Binding sites (indicated
#        in green) are extracted from published data and includes
#        experimentally confirmed binding sites as well as computationally
#        derived potential bind targets. miRanda predictions -- indicated
#        in red -- are the predicted target sequences for microRNA genes,
#        provided by <a href="http://microrna.sanger.ac.uk/targets/v3/">
#        Anton Enright's group</a> using the 
#        <a href="http://www.microrna.org/miranda_new.html">miRanda
#        program</a>. <a href="http://pictar.bio.nyu.edu/">PicTar predictions</a> -- indicated in blue -- 
#        are the predicted target sequences for microRNA genes from 
#        Lall et al; A genome-wide map of conserved microRNA targets in 
#        C. elegans. Curr Biol. 2006 Mar 7;16(5):460-71.



[OSTP]
feature       = PCR_product:Orfeome
glyph         = sub {
		my $f = shift;
		return 'primers' if $f->method eq 'PCR_product';
		return 'box';
	}	
category      = Reagents
height        = 4
fgcolor       = black
connect       = 1
#connect_color = \&ostp_color
#font2color    = \&ostp_color
#fgcolor       = \&ostp_color
#description   = \&ostp_amplifies
key           = ORFeome Project Primers
citation      = This track contains Orfeome Project primer pairs and RACE tags.  These primers were used to amplify
	C. elegans cDNAs.  A positive amplification, shown in green, is evidence that the region
	between the two primers is transcribed.  Failure to amplify, shown in red, suggests
	either that the gene model is incorrect, or that the gene is expressed at very low levels.
	Detailed gene models derived from ORFeome sequencing will be added to this display in
	the future.  See <i>Reboul et al. Nat. Genet. 2003 Apr 7.</i> and 
	<a href="http://worfdb.dfci.harvard.edu" target="_blank">WORFdb</a> for further information.


[PROMOTEROME]
feature       = PCR_product:Promoterome
bgcolor       = violet
glyph         = primers
category      = Reagents
fgcolor       = black
connect       = 1
connect_color = cyan
key           = Promoterome Primers
citation      = This track indicates the location of primer pairs for the <a href="http://vidal.dfci.harvard.edu/promoteromedb/">Promoterome project</a>.

[OLIGO]
feature       = reagent:Oligo_set
glyph         = primers
category      = Reagents
height        = 4
fgcolor       = black
connect       = 1
connect_color = black
font2color    = black
fgcolor       = black
key           = Microarray oligo probes
citation      = This track contains Affymetrix GeneChip and Washington University GSC microarray probe sets.

[OST]
feature       = ost:BLAT_OST_BEST
glyph         = segments
category      = Sequence Similarity Tracks
draw_target   = 1
show_mismatch = 1
ragged_start  = 1
height        = 5
fgcolor       = black
connector     = solid
group_pattern = /^OST[RF]/
description   = OST
link          = sub { 
			my $feature = shift;
                        my $name = $feature->name;
			$name =~ s/^OST[FR](10|30)/$1/;
			$name =~ s/^OST[FR]/10/;
                        $name =~ s/_\d*//;
                        $name =~ s/([A-Z]+\d+)$/\@$1/;
			return qq[http://worfdb.dfci.harvard.edu/searchallwormorfs.pl?by=plate&sid=$name];
                        }
label = 1
link_target   = _blank
key           = ORFeome sequence tags (best)
citation      = These are <a href="http://worfdb.dfci.harvard.edu/">ORFeome project</a> sequence reads.
	The ORFeome project designs primer assays for spliced mRNAs and then performs sequence reads
	on rtPCR material, producing "OSTs."  This track shows ORFeome project OSTs aligned to the
	<i>C. elegans</i> genome using Jim Kent's BLAT program
	[<a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">http://genome.cse.ucsc.edu/cgi-bin/hgBlat</a>].
	This track shows the best unique location for each OST.



[RST]
feature       = alignment:BLAT_RST_BEST
glyph         = segments
strand_arrow  = 1
category      = Sequence Similarity Tracks
draw_target   = 1
show_mismatch = 1
ragged_start  = 1
height        = 5
fgcolor       = black
bgcolor       = sub {
                my $f = shift;
                return 'green' if $f->name =~ /RST5/;
                return 'red';
                }
connector     = solid
group_pattern = /^OST[RF]/
label         = 1
description   = sub {
                   my $f = shift;
                   return "5' RST" if $f->name =~ /RST5/;
                   return "3' RST" if $f->name =~ /RST3/;
                }
key           = RACE sequence tags
citation      = The submitted RACE data come from cloning and sequencing of 5' and 3' RACE PCR
                 products. The experiments were done using RNA isolated from "mix stage"
                 wild-type N2 worms. SL1 and SL2 were used as 5' universal primers for 5'RACE
                 experiments.

                The "RST's" (i.e.,  RACE Sequence Tags), are 5' reads from cloned RACE products
                 (sequenced as minipools). Sequences are vector trimmed then quality trimmed (SL
                 sequences are not removed from 5' RST's). In quality trimming, the first sliding
                 window of 20 nt long with an average quality score higher than 15 marks the
                 start of good quality sequences. Likewise, the first sliding window of 20 nt
                 with average quality score lower than 15 marks the end of good quality
                 sequences.

                 Each RST is identified as being 5' or 3'(indicated as 5-RST or 3-RST) followed
                 by a unique trace ID (e.g., >CCSB_5-RST_373657). 1,355 5' and 1589 3' RSTs are
                 included in this submission. Data provided by Kourosh Salehi-Ashtiani, Vidal Lab.

		 For information on the project, please see the 
                 <a href="http://worfdb.dfci.harvard.edu/index.php?page=race">Race Project Page</a>
                 at <a href="http://worfdb.dfci.harvard.edu/">WorfDB</a>.

#[GB]
#feature       = region:Genbank
#glyph         = arrow
#category      = Misc
#tick          = +2
#base          = 1
#relative_coords = 1
#fgcolor       = sienna
#key           = Genbank entry
#link          = http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Search&db=Nucleotide&doptcmdl=GenBank&term=$name[accn]
# link          = ../gbrowse_moby?id=$name;source=$class
#citation      = The C. elegans genome was submitted to the GenBank and EMBL databases in
#	in the form of a set of minimally-overlapping segments.  This track shows the
#	position of these accessioned entries.

[CANONICAL]
feature       = region:Genomic_canonical
fgcolor       = sienna
glyph         = arrow
das category  = similarity
category      = Misc
label         = sub {
		my $f = shift;
		my $note = $f->attributes('Note');
	        my ($gb) = $note =~ /Genbank\s+(\S+)/;
		my $retval = $f->name;
		$retval .= " (Genbank $gb)" if $gb;
               }
height        = 7
tick          = 2
relative_coords = 1
key           = Contig submissions
citation      = This track shows the location and coordinates of contigs
        (mostly cosmids) submitted to GenBank/EMBL.
link          = sub {
                my $f = shift;
                my $note = $f->attributes('Note');
                my ($gb) = $note =~ /Genbank\s+(\S+)/;
                $gb || return undef;
		"http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Search&db=Nucleotide&doptcmdl=GenBank&term=${gb}[accn]";
                }

[BLASTX]
feature       = protein_match:wublastx
glyph	      = segments
bgcolor       = sub { $_[0]->name =~ /^BP:/ ? 'blue' : 'orange' }
fgcolor       = black
category      = Sequence Similarity Tracks
height        = 4
key           = BLASTX Hits
link          = sub {
  		  my $feature = shift;
	          my $name = $feature->name;
		  if ($name =~ s/^TR://) {
	             return sprintf("http://srs.ebi.ac.uk/srs6bin/cgi-bin/wgetz?-e+[SWALL-acc:%s]+-vn+2",$name);
		  } elsif ($name =~ s/^SW://) {
	             return sprintf("http://srs.ebi.ac.uk/srs6bin/cgi-bin/wgetz?-id+3LIc21HeBHW+-e+[SWALL:'%s']",$name);
                  } elsif ($name =~ s/ENSEMBL://) {
                     return sprintf('http://www.ensembl.org/Homo_sapiens/protview?peptide=%s',$name);
                  } elsif ($name =~ s/GADFLY://) {
                     return sprintf('http://hedgehog.lbl.gov:8002/cgi-bin/annot/query?namesearch=%s',$name);
                  } elsif ($name =~ s/SGD://) {
                     return sprintf('http://genome-www4.stanford.edu/cgi-bin/SGD/locus.pl?locus=%s',$name);
                  } elsif ($name =~ s/PS://) {
                     return sprintf('http://www.expasy.ch/cgi-bin/prosite-search-de?%s',$name);
	          } else {
                     return "/db/get?name=$name;class=Protein";
	          }
                }
citation =  These are WUBLASTX (nucleotide to protein, via six-frame
	translation) similarity hits, run biweekly against reference protein
	datasets from the genomes of yeast, fly, worm, and human and also
	against a reduced subset of SwissProt and TREMBL.  Blue-colored hits
	indicate similarity hits against C. briggsae predicted proteins.


[HMM]
feature       = similarity:hmmfs.3 repeat_region:RepeatMasker
category      = Misc
bgcolor       = red
fgcolor       = black
height        = 4
connector     = none
key           = Complex Repeats
citation      = This track contains matches to long repetitive elements detected using the HMMFS and RepeatMasker programs.

[REP]
feature       = tandem_repeat inverted_repeat
bgcolor       = bisque
fgcolor       = black
category      = Misc
height        = 4
key           = Simple Repeats
connector     = none
description   = sub {
	my $f = shift;
	my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
	my $method = $f->method;
	$method =~ s/_/ /g;
	return join('; ',$f->notes,"$ref: $start..$stop");
	}
label         = sub {
	my $f = shift;
	my $method = $f->method;
	$method =~ s/_/ /g;
	return $method;
	}
link          = 0
citation      = This track indicates the position of short exact tandem and inverted repetitive elements.

[CLO]
feature       = clone
                region:Vancouver_fosmid
fgcolor       = sub {
		my $feature = shift;
		return 'aqua' if !defined $feature->start || !defined $feature->stop;
		return 'black';
	}
das category   = structural
category      = Reagents
glyph         = anchored_arrow
height        = 7
key           = YACs, Fosmids, & Cosmids
font2color    = aqua
description   = sub {
		my $feature = shift;
		return 'Warning: Clone end(s) not known/shown.'
			unless defined $feature->start && defined $feature->end;
		1;
	}
title         = sub {
		my $f = shift;
			my $start = $f->start;
			my $ref = $f->ref;
			my $stop = $f->stop;
			my $name = $f->name;
		if ($f->source eq 'Vancouver_fosmid') {
			return "Vancouver fosmid: $name $ref:$start..$stop";
		}
		$start ||= '-';
		$stop  ||= '-';
		return "YACs, Fosmids, & Cosmids: $name $ref:$start..$stop";
	}
citation      = This track shows the locations of the cosmids, fosmids, and YACs used for the
	physical mapping and sequencing of the C. elegans genome.  The clone termini
	do not necessarily correspond to the termini of submitted GenBank/EMBL entries.
	In some cases the exact termini of the clones is not known.  For example, YACs
	were sequenced using PCR amplification across gaps in the cosmid maps.  When
	a clone end is not known, it is shown as an arrow extending to the end of the 
	display.  Such data is to be treated with caution.  The Vancouver fosmids can be ordered directly 
        from <a href="http://www.geneservice.co.uk/products/clones/Celegans_Fos.jsp">GeneService</a>.

[LINK]
feature       = region:Link Sequence:Chromosome
fgcolor       = black
glyph         = arrow
das category  = structural
category      = Misc
height        = 7
tick          = 2
relative_coords = 1
key           = Links and Superlinks
citation      = This track shows the location and coordinates of contigs
	created during the assembly of the C. elegans genome.



################################################
# Sequence Features
################################################
[GENOME_SEQUENCE_ERROR]
feature       = possible_base_call_error:RNASeq
category      = Misc:Sequence Features
glyph         = box
bgcolor       = white
fgcolor       = black
label         = sub {
	      my $f = shift;
	      return $f->notes || $f;
	      }
key           = Genome sequence error
citation      = A position within the genome that has been identified as having a base call error when compared to a 3rd party sequence data. The error state (Corrected or Not) and the exact change can be establised by looking in the individual features.


[SEGMENTAL_DUPLICATION]
feature       = segmental_duplication:segmental_duplication
category      = Misc:Sequence Features
glyph         = box
bgcolor       = white
fgcolor       = black
label         = sub {
	      my $f = shift;
	      return $f->notes || $f;
	      }
key           = Segmental duplication
citation      = Polymorphic segmental duplication as defined by the tool OrthoCluster. This feature represents one sequence from a pair of duplicons in the N2 genome.


[TRANSCRIPTION_START_SITE]
feature       = transcription_start_site:RNASeq
category      = Misc:Sequence Features
glyph         = box
bgcolor       = white
fgcolor       = black
label         = sub {
	      my $f = shift;
	      return $f->notes || $f;
	      }
key           = Transcription start site
citation      = Transcription_start_site defined by analysis of RNASeq short read datasets (example Hillier et al.)

[TRANSCRIPTION_END_SITE]
feature       = transcription_end_site:RNASeq
category      = Misc:Sequence Features
glyph         = box
bgcolor       = white
fgcolor       = black
label         = sub {
	      my $f = shift;
	      return $f->notes || $f;
	      }
key           = Transcription end site
citation      = Transcription_end_site defined by analysis of RNASeq short read datasets (example Hillier et al.)



################################################
# CURATION ANOMALIES
################################################
[SPLIT_GENE_BY_PROTEIN_GROUPS]
feature = SPLIT_GENE_BY_PROTEIN_GROUPS:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Split gene by protein groups
citation     = Instances where a curated gene has two or more sets of several proteins
               which do not overlap and where there are no shared member proteins
               between the sets indicating that the gene is a candidate for splitting. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[MERGE_GENES_BY_PROTEIN]
feature =  MERGE_GENES_BY_PROTEIN:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Merge genes by protein
citation     = Instances where there is a protein aligned by Blast at two chromosomal
               positions within 10 Kbases and which overlap two different curated genes
               and where the HSPs come from adjoining positions in the protein indicating
               that the genes are candidates for merging. This tends to also indicate
               genes which are incomplete duplicates of each other. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[SPLIT_GENES_BY_PROTEIN]
feature =  SPLIT_GENES_BY_PROTEIN:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Split genes by protein
citation     = Instances where there is a protein aligned by Blast at two chromosomal
               positions overlapping a single curated gene and where the HSPs come from 
               positions in the protein indicating that the gene is a candidate for
               splitting. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[CONFIRMED_EST_INTRON]
feature = CONFIRMED_EST_INTRON:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Confirmed EST intron
citation     = This is an intron whose existence is confirmed by being spanned in an
               EST BLAT alignment but which is not part of any curated CDS and which has
               not been marked as being in a UTR, or as to be be otherwise ignored. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[CONFIRMED_cDNA_INTRON]
feature =  CONFIRMED_cDNA_INTRON:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Confirmed cDNA intron
citation     = This is an intron whose existence is confirmed by being spanned in a cDNA
               BLAT alignment but which is not part of any curated CDS and which has not
               been marked as being in a UTR, or as to be be otherwise ignored. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[MISMATCHED_EST]
feature =  MISMATCHED_EST:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white
fgcolor      = black
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Mismatched EST
citation     = This is a chromosomal location where there are 2 or more ESTs aligned
               by BLAT with a quality score of over 99% and have an alignment of over
               30 bases where there is a SNP-like discontinuity in the ESTs alignment.
               This could indicate a genomic sequencing error. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[OVERLAPPING_EXONS]
feature =  OVERLAPPING_EXONS:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Overlapping exons
citation     = This is two exons from different genes in different senses which overlap. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[REPEAT_OVERLAPS_EXON]
feature =  REPEAT_OVERLAPS_EXON:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white
fgcolor      = black
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Repeat overlaps exon
citation     = This is a location where a curated CDS exon overlaps with a repeat regions, as found by RepeatMasker. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[SHORT_EXON]
feature =  SHORT_EXON:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white
fgcolor      = black
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Short exon
citation     = This is a curated CDS exon of less than 30 bases.

[FRAMESHIFTED_PROTEIN]
feature =  FRAMESHIFTED_PROTEIN:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white
fgcolor      = black
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Frameshifted protein
citation     = Blast alignments of proteins where there appears to be a
               frameshift. (Two Blast HSPs with a short chromosomal distance between them,
               aligned to different frames and with the HSPs coming from adjoining
               contiguous parts of the protein). [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[UNMATCHED_PROTEIN]
feature =  UNMATCHED_PROTEIN:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Unmatched protein
citation     = Blast alignments of proteins which do not overlap exons of curated CDSs, pseudogenes,
               transposons, rRNAs or non-coding transcripts. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]


[UNMATCHED_GENE_PREDICTIONS]
feature =  UNMATCHED_TWINSCAN:curation_anomaly
	   UNMATCHED_GENEFINDER:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = sub {
		my $f = shift;
		return 'red' if $f->method eq 'UNMATCHED_TWINSCAN';
		return 'green' if $f->method eq 'UNMATCHED_GENEFINDER';
		return 'blue';
	}
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Unmatched gene predictions
citation     = These are exons predicted by gene finders which do not overlap curated exons. Segments shown
               in red were predicted by Twinscan; segments in green predicted by Genefinder. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]


[UNMATCHED_WABA]
feature      = UNMATCHED_WABA:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white
fgcolor      = black
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Unmatched WABA
citation     = This is a WABA coding potential with a score of over 100 which does not overlap with a curated exons. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[UNMATCHED_SAGE]
feature =  UNMATCHED_SAGE:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Unmatched SAGE
citation     = This is a SAGE tag which does not overlap with a curated transcript. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[UNMATCHED_TSL]
feature =  UNMATCHED_TSL:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Unmatched TSL
citation     = This is a Trans-spliced leader sequence site which is more than 75 bases upstream of a CDS. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[UNATTACHED_TSL]
feature =  UNATTACHED_TSL:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Unattached TSL
citation     = This is a Trans-spliced leader sequence site which has not been attached to a gene. [<a href="#curation_anomalies">About the curation anomaly tracks</a>]

[WEAK_INTRON_SPLICE_SITE]
feature =  WEAK_INTRON_SPLICE_SITE:curation_anomaly
category     = Misc: Curation Anomalies
glyph        = segments
bgcolor      = white;
fgcolor      = black;
label        = sub {
		my $f = shift;
		return $f->notes;
	}
key          = Weak intron splice site
citation     = This is a 5' or 3' splice site of a curated CDS intron which has a score of less than 0.75.

               <hr><p>  
               <a name="curation_anomalies">About the Curation Anomaly tracks</a>: The
               curation anomaly tracks show data that appear to conflict with the existing
               curated gene models.</p>

               <p>There will also be data that supports the gene models; this supporting
               evidence is not highlighted in these curation anomaly tracks. The curation 
               anomaly track only gives an indication of potential problems with the gene 
               models and may therefore give the false impression that some models are
               incorrect.</p>

               <p>Both the supporting evidence and any conflicting anomaly data is taken
               into consideration when the gene model is curated.</p>

	       <p>The curators continue to amend gene models as new data becomes available
               and will concentrate their efforts on genes which appear to be the most in
               need of attention.</p>

               <p>If you have concerns about the correctness of any particular gene model,
               please email: help@wormbase.org together with any supporting evidence
               you may have for making a change.</p>



[AUGUSTUS_NGASP]
feature      = ngasp_gene:AUGUSTUS
label        = 1
description  = 1
key          = nGASP AUGUSTUS gene predictions
#glyph        = wormbase_transcript
glyph        = transcript2
category     = nGASP Genes
title        = AUGUSTUS gene $name
citation     = AUGUSTUS gene set from the nGASP competition.  Courtesy of Mario Stanke.
               Gene models are available for download at ftp.wormbase.org/pub/wormbase/nGASP

[mGENE_NGASP]
feature      = ngasp_gene:mGENE
label        = 1
description  = 1
key          = nGASP mGENE gene predictions
glyph        = wormbase_transcript
category     = nGASP Genes
title        = mGENE gene $name
citation     = mGENE gene set from the nGASP competition.  Courtesy of Gabriele Schweikert and Gunnar Raetsch.
               Gene models are available for download at ftp.wormbase.org/pub/wormbase/nGASP

[FGENESH_NGASP]
feature      = ngasp_gene:FGENESH
label        = 1
description  = 1
key          = nGASP FGENESH gene predictions
glyph        = wormbase_transcript
category     = nGASP Genes
title        = FGENESH++ gene $name
citation     = FGENESH++ gene set from the nGASP competition.  Courtesy of Darin Blasiar.
               Gene models are available for download at ftp.wormbase.org/pub/wormbase/nGASP
[JIGSA_NGASP]
feature      = ngasp_gene:nGASP
label        = 1
description  = 1
key          = nGASP JIGSAW combined genes
glyph        = wormbase_transcript
category     = nGASP Genes
title        = JIGSAW gene $name
citation     = JIGSAW gene set from the nGASP competition.  This is the combined gene set for AUGUSTUS
               mGENE and FGENESH++.  Courtesy of Darin Blasiar.
               Gene models are available for download at ftp.wormbase.org/pub/wormbase/nGASP


[ETILE:40001]
glyph         = wiggle_density

[ETILE]
smoothing     = mean
smoothing window = 16
max_score     = 15
feature       = microarray_oligo:non_polyA
                microarray_oligo:polyA
                microarray_oligo:small_non_polyA
description   = 0
sort_order    = sub ($$) {
                  my $a = shift->feature->source_tag;
                  my $b = shift->feature->source_tag;
                  return -1 if $a =~ /^poly/;
                  return 1  if $b =~ /^poly/;
                  return 0;
                }
glyph         = wiggle_xyplot
glyph select  = wiggle_density wiggle_xyplot
height        = 8
bgcolor       = black
category      = Phenotype/Expression Tracks
key           = Mixed-stage tiling arrays
balloon hover = Affymetrix tiling array data from He et al. (2007) <b>Mapping the <i>C. elegans</i> noncoding transcriptome with a whole-genome tiling microarray</b>
label         = sub {
                  my $feature = shift;
                  my $desc = $feature->source_tag;
                  $desc =~ s/adenylated/A/;
                  $desc =~ s/mixed_stage_//;
                  $desc =~ s/small.+/small RNA/;
                  return $desc;
                }
label_position = left
citation      = <b>Life_stage</b>  mixed stage<br>
 <b>Strain</b>  N2<br>
 <b>Remark</b>  The data were analyzed with Affymetrix Tiling analysis software (version 1.0.15). Frequency is a log2(max(PM-MM,1))
 value for each probe, after quantile-normalization and median intensity scaling for
 all replicates. See <a href="http://www.ncbi.nlm.nih.gov/sites/entrez?db=pubmed&cmd=retrieve&dopt=AbstractPlus&list_uids=17785534"
 target="_new" title="Mapping the C. elegans noncoding transcriptome with a whole-genome tiling microarray">
 He et al., 2007</a> for details.

[AdjustedNSome]
feature        = microarray_oligo:AdjustedNSome_coverage.collapsed
glyph          = wiggle_xyplot
glyph select   = wiggle_density wiggle_xyplot
pos_color      = magenta
neg_color      = violet
label          = sub { (shift->attributes('Note'))[0] }
#label_position = left
min_score      = -3
max_score      = 3
smoothing      = mean
smoothing window  = 6
key            = Nucleosome Coverage (adjusted)
category       = Misc
graph_height   = 40
citation       = Adjusted Nucleosome coverage from <a href="http://genome.cshlp.org/cgi/content/short/18/7/1051">
 Valouev et al.,Genome Res. 18:1051-63</a>, downloaded from
 <a href="http://genome.ucsc.edu/cgi-bin/hgTrackUi?hgsid=111781230&c=chrII&g=nucleosomeAdjustedCoverage">the UCSC</a>.
 The plot represents relative mononucleosome enrichment at each position in the genome (on a log of 2 scale).
 The coverage metric is given according to a formula [ (1+n)/N ] / [ (1+c)/C ] where n and c are the numbers
 of putative 147 base pair cores covering each base pair from nucleosome and control data, N and C are the
 total number of nucleosome and control reads obtained by SOLiD sequencing with 25 base pairs mapped to the
 reference genome.

[NSome]
feature        = microarray_oligo:NSome_coverage.minus.collapsed
                 microarray_oligo:NSome_coverage.plus.collapsed
glyph          = wiggle_xyplot
glyph select   = wiggle_density wiggle_xyplot
bgcolor        = sub { shift->source_tag =~ /minus/ ? 'green' : 'blue' }
label          = sub { (shift->attributes('Note'))[0] }
smoothing      = mean
smoothing window  = 6
key            = Nucleosome Coverage
category       = Misc
max_score      = 200
graph_height   = 8
citation       = Adjusted Nucleosome coverage from <a href="http://genome.cshlp.org/cgi/content/short/18/7/1051">
 Valouev et al.,Genome Res. 18:1051-63</a>, downloaded from
 <a href="http://genome.ucsc.edu/cgi-bin/hgTrackUi?hgsid=111781230&c=chrII&g=nucleosomeAdjustedCoverage">the UCSC</a>.
 The plot represents relative mononucleosome enrichment at each position in the genome (on a log of 2 scale).
 The coverage metric is given according to a formula [ (1+n)/N ] / [ (1+c)/C ] where n and c are the numbers
 of putative 147 base pair cores covering each base pair from nucleosome and control data, N and C are the
 total number of nucleosome and control reads obtained by SOLiD sequencing with 25 base pairs mapped to the
 reference genome.

[MNase]
feature        = microarray_oligo:MNase_coverage.minus.collapsed
                 microarray_oligo:MNase_coverage.plus.collapsed
glyph          = wiggle_xyplot
glyph select   = wiggle_density wiggle_xyplot
bgcolor        = sub { shift->source_tag =~ /minus/ ? 'brown' : 'orange' }
label          = sub { (shift->attributes('Note'))[0] }
graph_height   = 8
smoothing      = mean
smoothing window  = 6
key            = Nucleosome Coverage (MNase control)
category       = Misc
citation       = Adjusted Nucleosome coverage from <a href="http://genome.cshlp.org/cgi/content/short/18/7/1051">
 Valouev et al.,Genome Res. 18:1051-63</a>, downloaded from
 <a href="http://genome.ucsc.edu/cgi-bin/hgTrackUi?hgsid=111781230&c=chrII&g=nucleosomeAdjustedCoverage">the UCSC</a>.
 The plot represents relative mononucleosome enrichment at each position in the genome (on a log of 2 scale).
 The coverage metric is given according to a formula [ (1+n)/N ] / [ (1+c)/C ] where n and c are the numbers
 of putative 147 base pair cores covering each base pair from nucleosome and control data, N and C are the
 total number of nucleosome and control reads obtained by SOLiD sequencing with 25 base pairs mapped to the
 reference genome.

[FTILE_N2:40001]
max_score     = 200
glyph     = wiggle_density

[FTILE_N2]
smoothing     = mean
smoothing window = 16
max_score     = 1500
feature       = microarray_oligo:CEwtN2Emb
                microarray_oligo:CEwtN2GA
                microarray_oligo:CEwtN2L2
                microarray_oligo:CEwtN2L3
                microarray_oligo:CEwtN2L4
                microarray_oligo:CEwtN2YA
description   = 0
sort_order    = sub ($$) {
                  my $a = shift->feature->source_tag;
                  my $b = shift->feature->source_tag;
                  return 1  if $a =~ /GA/;
                  return -1 if $b =~ /GA/;
                  return -1 if $a =~ /Emb/;
                  return 1  if $a =~ /A/ && $b !~ /A/;
                  my ($sa) = $a =~ /L(\d+)/;
                  my ($sb) = $b =~ /L(\d+)/;
                  if ($sa && $sb) {
                    return -1 if $sa < $sb;
                    return 1 if $sa > $sb;
                  }
                  return 0;
                }
glyph         = wiggle_xyplot
glyph select  = wiggle_density wiggle_xyplot
height        = 8
bgcolor       = black
category      = Phenotype/Expression Tracks
key           = N2 tiling arrays
label         = sub {
                  my $feature = shift;
                  my $desc = $feature->source_tag;
                  $desc =~ s/CEwtN2//;
                  $desc =~ s/G/gravid /;
                  $desc =~ s/Y/young /;
                  $desc =~ s/A/adult/;
                  return $desc;
                }
label_position = left
citation       =
  <b>Strain</b>  N2<br>
  <b>Remark</b>  Provided by the Andrew Fraser group.
  The data were analysed using TAS (version 1.1 Build 2, 5/10/2006) with probes originally mapped to
  WS150 version of the genome.  Quantile normalization was carried out and probe intensity was median scaled.

[FTILE_smg1:40001]
max_score = 200
glyph     = wiggle_density


[FTILE_smg1]
smoothing     = mean
smoothing window = 16
max_score     = 1500
feature       = microarray_oligo:CEmssmg1GA
                microarray_oligo:CEmssmg1L3
                microarray_oligo:CEmssmg1L4
                microarray_oligo:CEmssmg1YA
sort_order    = sub ($$) {
                  my $a = shift->feature->source_tag;
                  my $b = shift->feature->source_tag;
                  return 1  if $a =~ /GA/;
                  return -1 if $b =~ /GA/;
                  return -1 if $a =~ /Emb/;
                  return 1  if $a =~ /A/ && $b !~ /A/;
                  my ($sa) = $a =~ /L(\d+)/;
                  my ($sb) = $b =~ /L(\d+)/;
                  if ($sa && $sb) {
                    return -1 if $sa < $sb;
                    return 1 if $sa > $sb;
                  }
                  return 0;
                }
glyph         = wiggle_xyplot
glyph select   = wiggle_density wiggle_xyplot
height        = 8
bgcolor       = black
category      = Phenotype/Expression Tracks
key           = smg-1 tiling arrays
label         = sub {
                  my $feature = shift;
                  my $desc = $feature->source_tag;
                  $desc =~ s/CEmssmg1//;
                  $desc =~ s/G/gravid /;
                  $desc =~ s/Y/young /;
                  $desc =~ s/A/adult/;
                  return $desc;
                }
label_position = left
citation       =
  <b>Strain</b>  N2<br>
  <b>Remark</b>  Provided by Andrew Fraser&#39;s group.
  The data were analysed using TAS (version 1.1 Build 2, 5/10/2006) with probes originally mapped to
  WS150 version of the genome.  Quantile normalization was carried out and probe intensity was median scaled.





############################################################
#
#  modENCODE data
#
############################################################

# Jason Lieb tracks
# 
# no smoothing for large segments
#[LIEBChIP_chip:40001]
#smoothing window  = 1
#
## semantic zoom to wiggle_density over 40 kb
#[LIEBChIP_chip:40001]
#glyph             = wiggle_density
# 
## default glyph is wiggle xyplot
#[LIEBChIP_chip]
#feature           = microarray_oligo:HTZ-1_mean
#                     microarray_oligo:DPY-27_mean_zscore
#                     microarray_oligo:SDC3_mean_zscore
#glyph             = wiggle_xyplot
#glyph select      = wiggle_density wiggle_xyplot
#neg_color         = orange
#pos_color         = blue
#min_score         = -1.5
#max_score         = 1.5
#height            = 8
#label             = sub {
#                       my $src = shift->source_tag;
#                       $src =~ s/_\S+$//;
#                       $src =~ s/Lieb_//;
#                       $src;
#                     }
#label_position    = left
#smoothing         = mean
#smoothing window  = 16
#key               = ChIP-chip arrays
#category          = modENCODE Tracks: Lieb Group
#title             = <b>$name ChIP-chip experiment from the Lieb group</b><br>
#                      The color scheme is orange &lt; zero &gt; blue.
#                      Color-intensity corresponds to signal amplitude, truncated
#                      to the range of <span style=white-space:nowrap>
#                      -1.0 - &#43;1.0 &#40;-2.0 - &#43;2.0</span> for H3 experiments&#41;
#citation          = ChIP-chip experiments from labs in the Lieb group.  Regions shown in orange are less than zero and in blue are greater than zero.
#                     The intensity of the color indicates the signal amplitude.  The range is truncated at -2:+2.  The mean scores for three biological
#                     replicate experiments were used.
 
#[LIEB_computed_peaks]
#feature           = microarray_oligo:DPY-27_chrX_peaks
#                     microarray_oligo:HTZ-1_peaks
#                     microarray_oligo:SDC3_chrX_peaks
#glyph             = wiggle_box
#glyph select      = wiggle_box
#height            = 8
#fgcolor           = blue
#bgcolor           = blue
#label             = sub {
#                       my $src = shift->source_tag;
#                       $src =~ s/_\S+//g;
#                       $src =~ s/Lieb_//;
#                       $src;
#                     }
#label_position    = left
#key               = ChIP-chip computed peaks
#category          = modENCODE Tracks: Lieb Group
#title          = sub {
#                    my $name = shift->name;
#                    $name =~ s/_\S+//;
#                    "<b>Computed peaks for ChIP-chip arrays from labs in the Lieb group: $name</b><br>".
#                    "Computed peaks are putative binding sites for $name";
#                 }
# citation       = Computed peaks are regions for which the signal in the ChIP-chip array are significantly above background levels.  Such regions are
#                  putative binding sites for the protein targeted by the antibody.
 
  
# GBrowse stanza configuration for tracks generated
# for project #43: HTZ-1_N2_Mixed_Embryos (BK00001_HTZ1_N2_MXEMB)
 
#[HTZ1_N2_Mi_WIG_2067_43]
#feature = WIG:2067
#bicolor_pivot = zero
#smoothing = mean
#label = sub { return shift->name; }
#citation = TEST
#max_score = 3
#glyph = wiggle_xyplot
#bump density = 250
#category = Preview
#pos_color = blue
#data_source_id = 43
#sort_order = sub ($$) {shift->feature->name cmp shift->feature->name}
#stranded = 0
#connector = solid
#fgcolor = black
#track_id = 2067
#glyph select = wiggle_density wiggle_xyplot
#min_score = -3
#label_transcripts = 
#label density = 100
#smoothing_window = 10
#neg_color = orange
#key = 43 -normalized_data/HTZIP2_WS180.wig- WIG:2067
#group_on = 
#bgcolor = lightgrey


#[HTZ1_N2_Mi_binding_site_2071_43]
#label = sub { return shift->name; }
#citation = TEST
#feature = binding_site:2071_details
#glyph = segments
#bump density = 250
#category = Preview
#data_source_id = 43
#stranded = 0
#connector = solid
#fgcolor = black
#track_id = 2071
#label_transcripts = 
#label density = 100
#key = HTZ-1 Binding Peaks in Mixed Embryos from N2
#group_on = 
#bgcolor = lightgrey
 
#[HTZ1_N2_Mi_binding_site_2071_43:100002]
#label = sub { return shift->name; }
#feature = binding_site:2071
#glyph = wiggle_density
#stranded = 0
#fgcolor = black
#group_on = 
#bgcolor = lightgrey


## LIEB TRACKS:

#include modencode/lieb/*.conf

## HENIKOFF TRACKS:

#include modencode/henikoff/*.conf

## PIANO TRACKS:

#include modencode/piano/*.conf

## SNYDER TRACKS:

#include modencode/snyder/*.conf

## WATERSTON TRACKS:

#include modencode/waterston/*.conf

