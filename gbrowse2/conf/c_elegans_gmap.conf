[GENERAL]

description = C. elegans (genetic map)
database = c_elegans_gmap
plugins     =

# list of tracks to turn on by default
default features = INTERPOLATED_GENES
		   MAPPED_GENES
		   CLONED_GENES
		   CONFIDENCE_INTERVALS
		   LOCI:Overview

init_code = use lib '/usr/local/wormbase/website-classic/cgi-perl/lib';
        use Ace;
        use ElegansSubs;

# examples to show in the introduction
examples = I aap-1 R13A5.9 nDf20 m2

# "automatic" classes to try when an unqualified identifier is given
reference class   = Gene
automatic classes = Gene Sequence Variation Rearrangement

show track categories = 0

#################################
# database definitions
#################################

[c_elegans_gmap:database]
db_adaptor  = Bio::DB::GFF
db_args     = -dsn DBI:mysql:c_elegans_gmap;user=nobody;host=localhost
passwd      =
search options = default +wildcard -stem +fulltext +autocomplete

############################################
# HTML Boilerplate
############################################
# wormbases-specific mod.  Turn off autocomplete
head = <script>var doAutocomplete;</script>

header = sub {
	require ElegansSubs;
	require CGI;
	$Ace::Browser::AceSubs::TOP = 0;
	return ElegansSubs::Banner();
	}


#######################################################
# Units and scaling
#######################################################
units = cM
unit_divider = 1000000
default segment = 0.10
max segment = 20.0
min segment = 0.001
no tick units = 1

# zoom levels, in centimorgans
zoom levels    = 0.001 0.005 0.01 0.05 0.075 0.1 0.5 1.0 1.5 2.0 5.0 10.0 15.0 20.0

low res = 2.0

#default varying = 1

keystyle     = between
empty_tracks = key

# where to link to when user clicks in detailed view
link          = /db/get?name=$name;class=$class




#############################
# Default track settings
#############################
[TRACK DEFAULTS]
#remote renderer = http://localhost:8101 http://localhost:8102/ http://localhost:8103/
#remote renderer = http://206.108.125.173:8101 http://206.108.125.173:8102 http://206.108.125.173:8103
#                  http://206.108.125.174:8101 http://206.108.125.174:8102 http://206.108.125.174:8103
#                  http://206.108.125.175:8101 http://206.108.125.175:8102 http://206.108.125.175:8103
height      = 10
forwardcolor = violet
reversecolor = turquoise
utr_color    = gainsboro
font2color   = blue




# what to show in the overview section
[LOCI:overview]
feature       = gene:landmark
label         = 1
glyph         = generic
bgcolor       = lavender
key           = Landmarks
height        = 5


[SEQUENCE]
feature      = region Sequence
key          = Clones and Contigs
glyph        = box
height       = 6


# Pan-genes track - all-in-one goodness
[GENES]
# Other attributes inclue GMap_start PMap_range
feature      = interpolated_gmap_position:map_position
	       experimental_gmap_position:map_position
	       cloned_mutant:map_position
category     = Genes
glyph        = box
bgcolor      = sub {
		my $f = shift;
		return 'red'    if $f->method eq 'interpolated_gmap_position';
		return 'yellow' if $f->method eq 'experimental_gmap_position';
		return 'green'  if $f->method eq 'cloned_mutant';
	}
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		my $molecular_name = $f->attributes('Sequence_name');
		my $cgc_name       = $f->attributes('CGC_name');
		return "$molecular_name ($cgc_name)" if $cgc_name && $molecular_name;
		return $cgc_name if $cgc_name;
		return "$molecular_name";
	}
title        = sub {
		my $f = shift;
		my $molecular_name = $f->attributes('Sequence_name');
		my $cgc_name       = $f->attributes('CGC_name');
		return "WormBase gene $molecular_name ($cgc_name)" if $cgc_name;
		return "WormBase gene $molecular_name";
	}
key          = All genes, one track
citation     = This track contains all available genes. Predicted genes that have been interpolated
		onto the genetic map are shown in red.  Genetically mapped loci are shown in yellow.
 		Genetic loci that have been cloned are shown in green.

[INTERPOLATED_GENES]
feature      = interpolated_gmap_position:map_position
category     = Genes
glyph        = box
bgcolor      = blue
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		my $molecular_name = $f->attributes('Sequence_name');
		my $cgc_name       = $f->attributes('CGC_name');
		return "$molecular_name ($cgc_name)" if $cgc_name;
		return "$molecular_name";
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $molecular_name = $f->attributes('Sequence_name');
		my $cgc_name       = $f->attributes('CGC_name');
		my $pos            = $f->attributes('GMap_position');
		my $pmap           = $f->attributes('PMap_range');
		return "$molecular_name / $cgc_name ($pos cM; $pmap bp)" if $cgc_name;
		return "$molecular_name ($pos cM; $pmap bp)";
	}
key          = Interpolated genes
citation     = This track contains predicted genes that have been interpolated onto the genetic map.


[MAPPED_GENES]
feature      = experimental_gmap_position:map_position
category     = Genes
glyph        = box
bgcolor      = green
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		my $molecular_name = $f->attributes('Sequence_name');
		my $cgc_name       = $f->attributes('CGC_name');
		return "$cgc_name" if $cgc_name;
		return "$molecular_name";   # There should be no molecular name
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $molecular_name = $f->attributes('Sequence_name');
		my $pos            = $f->attributes('GMap_position');
		my $cgc_name       = $f->attributes('CGC_name');
		return "WormBase gene $cgc_name ($pos cM)" if $cgc_name;
	}
key          = Mapped genes
citation     = This track contains genetically mapped loci that have not yet been assigned to the physical map.


[CLONED_GENES]
feature      = cloned_mutant:map_position
category     = Genes
glyph        = box
bgcolor      = green
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		my $molecular_name = $f->attributes('Sequence_name');
		my $cgc_name       = $f->attributes('CGC_name');
		return "$molecular_name ($cgc_name)" if $cgc_name;
		return "$molecular_name";
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $molecular_name = $f->attributes('Sequence_name');
		my $cgc_name       = $f->attributes('CGC_name');
		my $pos            = $f->attributes('GMap_position');
		my $pmap           = $f->attributes('PMap_range');
		return "$molecular_name / $cgc_name ($pos cM; $pmap bp)" if $cgc_name;
		return "$molecular_name ($pos cM; $pmap bp)";
	}
key          = Cloned mutants
citation     = This track contains genes which have been cloned and placed on the genetic map.


[CONFIDENCE_INTERVALS]
feature      = calculated_genetic_range:confidence_interval
category     = Genes
glyph        = span
bgcolor      = red
fgcolor      = black
height       = 3
font2color   = blue
label        = sub {
		my $f = shift;		
		my @notes = $f->notes;
		return $notes[0];
	}
description  =  sub {
		my $f = shift;
		my @notes = $f->notes;
		return $notes[1];
	}
title        = sub {
		my $f = shift;
	        my $range = $f->attributes('GMap_range');
		return "GMap range: $range";
	}
key          = Confidence intervals
citation     = This track displays the confidence intervals for genes that have not yet been placed on the physical map.



[SNIP_SNPS]
feature      = rflp_polymorphism
category     = Variations
glyph        = sub {
		my $f = shift;
		return 'diamond';
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;
		my $s = $f->method;
		return 'green'   if $s =~ /complex_change/i;
		return 'green'   if $f->length <= 3 or $f->source eq 'verified';
		return 'red'   if $f->length <= 3 or $f->source eq 'predicted';
		return 'white';
	}
fgcolor      = black
font2color   = blue
height       = 8
label        = sub {
		my $feature = shift;
		my $desc = join ' ',$feature->notes;
		my $name = $feature->display_name;
		return $name;
	}
title        = sub {
		my $f = shift;
	        my $pos = $f->attributes('GMap_position');
		my $name = $f->display_name;
		return "$name ($pos cM)";
	}
key           = Snip-SNPs
citation      = This track shows polymorphisms that generate a
		restriction length polymorphism (aka snip-SNPs). Those shown in red are predicted; those shown in 
                green have been verified experimentally. 


#[VERIFIED_SNIP_SNPS]
#feature      = rflp_polymorphism:verified
#category     = Variations
#glyph        = sub {
#		my $f = shift;
#		return 'diamond';
#		return 'generic';
#	}
#bgcolor      = sub {
#		my $f = shift;
#		my $s = $f->method;
#		return 'green'   if $s =~ /complex_change/i;
#		return 'green'   if $f->length <= 3 or $f->method eq 'SNP';
#		return 'white';
#	}
#fgcolor      = black
#font2color   = blue
#height       = 8
#label        = sub {
#		my $feature = shift;
#		my $desc = join ' ',$feature->notes;
#		my $name = $feature->display_name;
#		return $name;
#	}
#key           = Snip-SNPs (verified)
#citation      = This track shows polymorphisms that generate a
#		restriction length polymorphism (aka snip-SNPs) that
#		have been verified experimentally.
#
#[PREDICTED_SNIP_SNPS]
#feature      = rflp_polymorphism:predicted
#category     = Variations
#glyph        = sub {
#		my $f = shift;
#		return 'box'  if $f->method =~ /complex_change/i;
#		return 'diamond';
#		return 'generic';
#	}
#bgcolor      = sub {
#		my $f = shift;
#		my $s = $f->method;
#		return 'yellow'   if $s =~ /complex_change/i;
#		return 'yellow';
#	}
#fgcolor      = black
#font2color   = blue
#height       = 8
#key           = Snip-SNPs (predicted)
#citation      = This track shows polymorphisms that generate a
#		restriction length polymorphism (aka snip-SNPs) that
#		have yet to be verified experimentally.


# Sequence SNPs - consolidated track
[SNPS]
feature      = polymorphism:verified polymorphism:predicted
category     = Variations
glyph        = sub {
		my $f = shift;
		return 'box'  if $f->method =~ /complex_change/i;
		return 'diamond';
	}
bgcolor      = sub {
		my $f = shift;
		my $source = $f->source;
		return 'red' if $source eq 'predicted';
		return 'green';
	}

title        = sub {
		my $f = shift;
	        my $pos = $f->attributes('GMap_position');
		my $name = $f->display_name;
		return "$name ($pos cM)";
	}
fgcolor      = black
font2color   = blue
height       = 8
key           = SNPs
citation      = This track shows polymorphisms detectable only by sequencing.  Those that have been
                verified are shown in green, those that are predicted are shown in red.


#[VERIFIED_SNPS]
#feature      = polymorphism:verified
#category     = Polymorphisms
#glyph        = sub {
#		my $f = shift;
#		return 'box'  if $f->method =~ /complex_change/i;
#		return 'diamond';
#	}
#bgcolor      = green
#fgcolor      = black
#font2color   = blue
#height       = 8
#key           = Sequence polymorphisms (verified)
#citation      = This track shows polymorphisms detectable only by sequencing that have been experimentally verified.


#[PREDICTED_SNPS]
#feature      = polymorphism:predicted
#category     = Polymorphisms
#glyph        = sub {
#		my $f = shift;
#		return 'box'  if $f->method =~ /complex_change/i;
#		return 'diamond';
#		return 'generic';
#	}
#bgcolor      = sub {
#		my $f = shift;
#		my $s = $f->method;
#		return 'red'   if $s =~ /complex_change/i;
#		return 'red';
#		return 'white';
#	}
#fgcolor      = black
#font2color   = blue
#height       = 8
#key           = Sequence polymorphisms (predicted)
#citation      = This track shows polymorphisms detectable only by sequencing that have been predicted but not yet verified.




#[REARRANGEMENTS]
#feature      = rearrangement
#category     = Variations
#glyph        = box
#bgcolor      = blue
#fgcolor      = black
#font2color   = blue
#height       = 6
#label        = sub {
#		my $f = shift;
#		return $f->display_name;
#	}
##description  = 1
#title        = sub {
#		my $f = shift;
#		my $gmap_range     = $f->attributes('GMap_range') || $f->attributes('GMap_position');
#		my $type = $f->attributes('Type');
#		return $f->display_name . " ($gmap_range cM; $type)";
#	}
#key          = Rearrangements
#citation     = This track displays the genetic extent of rearrangements.



[DELETIONS]
feature      = rearrangement:deletion allele:deletion
category     = Variations
glyph        = box
bgcolor      = sub {
		my $f = shift;
#		return 'blue' if $f->method eq 'deletion';
		return 'red';
	}
fgcolor      = black
height       = 6
font2color   = blue
label        = sub {
		my $f = shift;
		return $f->display_name;
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $gmap_range     = $f->attributes('GMap_range') || $f->attributes('GMap_position');
		return $f->display_name . " ($gmap_range cM)";
	}
key          = Deletions
citation     = This track displays the genetic extent of deletions.


[DUPLICATIONS]
feature      = rearrangement:duplication allele:duplication
category     = Variations
glyph        = box
height       = 6
bgcolor      = blue
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		return $f->display_name;
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $gmap_range     = $f->attributes('GMap_range') || $f->attributes('GMap_position');
		return $f->display_name . " ($gmap_range cM)";
	}
key          = Duplications
citation     = This track displays the genetic extent of duplications.


[TRANSLOCATIONS]
feature      = rearrangement:translocation
category     = Variations
glyph        = box
height       = 6
bgcolor      = blue
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		return $f->display_name;
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $gmap_range     = $f->attributes('GMap_range') || $f->attributes('GMap_position');
		return $f->display_name . " ($gmap_range cM)";
	}
key          = Translocations
citation     = This track displays the genetic extent of translocations.


[SUBSTITUTIONS]
feature      = allele:substitution
category     = Variations
glyph        = sub {
		my $f = shift;
		return 'triangle' if $f->source eq 'insertion';
		return 'generic';
	}
bgcolor      = blue
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		return $f->display_name;
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $pos = $f->attributes('GMap_range') || $f->attributes('GMap_position');
		my $source = $f->source;
		return $f->display_name . " ($pos cM; $source)";
	}
key          = Substitutions
citation     = This track displays the genetic extent of substitution alleles.


[INSERTIONS]
feature      = allele:insertion
category     = Variations
glyph        = sub {
		my $f = shift;
		return 'triangle';
	}
bgcolor      = blue
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		return $f->display_name;
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $pos = $f->attributes('GMap_range') || $f->attributes('GMap_position');
		my $source = $f->source;
		return $f->display_name . " ($pos cM; $source)";
	}
key          = Insertions
citation     = This track displays the genetic extent of insertion alleles.




[ALLELES]
feature      = allele:molecular_change_unknown
category     = Variations
glyph        = sub {
		my $f = shift;
		return 'triangle';
	}
bgcolor      = blue
fgcolor      = black
font2color   = blue
label        = sub {
		my $f = shift;
		return $f->display_name;
	}
#description  = 1
title        = sub {
		my $f = shift;
		my $pos = $f->attributes('GMap_range') || $f->attributes('GMap_position');
		my $source = $f->source;
		return $f->display_name . " ($pos cM; $source)";
	}
key          = Alleles
citation     = This track displays the genetic extent of alleles whose molecular change is unknown.
