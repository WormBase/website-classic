[GENERAL]
description = A. suum (current release)
database    = a_suum

# list of tracks to turn on by default
default features = AUGUSTUS CUFFLINKS GENEWISE GLEAN GLIMMERHMM SNAP

# The class of the objects used to establish the reference coordinates.
reference class  = Sequence

# examples to show in the introduction
examples = Scaffold122 Scaffold434 L4_01912 L3E_00612 L3E_03187 GS_00389

search attributes = Note Alias 

# "automatic" classes to try when an unqualified identifier is given
automatic classes = AUGUSTUS CUFFLINKS GENEWISE GLEAN GLIMMERHMM SNAP


# Various places where you can insert your own HTML -- see configuration docs
html1 =  sub { return CGI::h1(CGI::i('A. suum')); }

# Override the [DETAIL SELECT MENU] from detail_select_menu.conf
#include includes/detail_menu-default.conf

# Plugin configuration
#include includes/plugin.conf

########################
# Default glyph settings
########################

[TRACK DEFAULTS]
#remote renderer = http://localhost:8101 http://localhost:8102/ http://localhost:8103/
#remote renderer = http://206.108.125.173:8101 http://206.108.125.173:8102 http://206.108.125.173:8103
#                  http://206.108.125.174:8101 http://206.108.125.174:8102 http://206.108.125.174:8103
#                  http://206.108.125.175:8101 http://206.108.125.175:8102 http://206.108.125.175:8103
forwardcolor = violet
reversecolor = turquoise
utr_color    = gainsboro
font2color   = blue
height        = 10
label density = 100
bump density  = 500
label_transcripts = sub { shift->get_SeqFeatures('mRNA') > 1 }
label = 1
#link         =  AUTO

#################################
# database definitions
#################################

[a_suum:database]
db_adaptor  = Bio::DB::SeqFeature::Store
db_args     = -adaptor DBI::mysql
              -dsn a_suum
              -user nobody
passwd      =
search options = default +wildcard -stem +fulltext +autocomplete

################## TRACK CONFIGURATION ####################
# the remainder of the sections configure individual tracks
###########################################################



################################################
# GENE MODELS
################################################


[AUGUSTUS]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# include includes/gene_models.track
category     = Genes
key          = Augustus
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
#balloon hover  = sub {my $f = shift;
#	                my $name = $f->name; 
#                        my $class = $f->class;
#    		        "url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG";
#	} 
#link = sub {
#	my $f = shift;
#	return if $f->method eq 'RNAz';
#	my $name = $f->attributes('Gene') || $f->name;
#	return "/db/get?name=$name;class=Gene";
#	}

# GFF3 specific configuration; supplies: feature and glyph.
#    include includes/gene_models-GFF3.track
# Configuration specific for GFF3 entries
#feature  = CDS:WormBase    # or gene with the gene glyph
#glyph    = transcript2     # or gene, but it lacks callbacks
feature      = gene:AUGUSTUS
glyph        = gene
# Tier 2/3 configuration; supplies: title, label, description, citation
# include includes/gene_models-tier2.track
title    = A. suum Augustus prediction $name
citation = 
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[AUGUSTUS:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[AUGUSTUSCDS]
feature      = CDS:AUGUSTUS
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature "  }
key          = Augustus Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  


[CUFFLINKS]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# include includes/gene_models.track
category     = Genes
key          = Cufflinks
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
#balloon hover  = sub {my $f = shift;
#	                my $name = $f->name; 
#                        my $class = $f->class;
#    		        "url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG";
#	} 
#link = sub {
#	my $f = shift;
#	return if $f->method eq 'RNAz';
#	my $name = $f->attributes('Gene') || $f->name;
#	return "/db/get?name=$name;class=Gene";
#	}
#
# GFF3 specific configuration; supplies: feature and glyph.
#    include includes/gene_models-GFF3.track
# Configuration specific for GFF3 entries
#feature  = CDS:WormBase    # or gene with the gene glyph
#glyph    = transcript2     # or gene, but it lacks callbacks
feature      = gene:Cufflinks
glyph        = gene
# Tier 2/3 configuration; supplies: title, label, description, citation
# include includes/gene_models-tier2.track
title    = A. suum Cufflinks prediction $name
citation = 
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[CUFFLINKS:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[CUFFLINKSCDS]
feature      = CDS:Cufflinks
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature" }
key          = Cufflinks Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  



[GENEWISE]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# include includes/gene_models.track
category     = Genes
key          = GeneWise
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
#balloon hover  = sub {my $f = shift;
#	                my $name = $f->name; 
#                        my $class = $f->class;
#    		        "url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG";
#	} 
#link = sub {
#	my $f = shift;
#	return if $f->method eq 'RNAz';
#	my $name = $f->attributes('Gene') || $f->name;
#	return "/db/get?name=$name;class=Gene";
#	}
#
# GFF3 specific configuration; supplies: feature and glyph.
#    include includes/gene_models-GFF3.track
# Configuration specific for GFF3 entries
#feature  = CDS:WormBase    # or gene with the gene glyph
#glyph    = transcript2     # or gene, but it lacks callbacks
feature      = gene:GeneWise
glyph        = gene
# Tier 2/3 configuration; supplies: title, label, description, citation
# include includes/gene_models-tier2.track
title    = A. suum GeneWise prediction $name
citation = 
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[GENEWISE:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[GENEWISECDS]
feature      = CDS:GeneWise
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature" }
key          = GeneWise Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  



[GLEAN]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# include includes/gene_models.track
category     = Genes
key          = GLEAN
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
#balloon hover  = sub {my $f = shift;
#	                my $name = $f->name; 
#                        my $class = $f->class;
#    		        "url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG";
#	} 
#link = sub {
#	my $f = shift;
#	return if $f->method eq 'RNAz';
#	my $name = $f->attributes('Gene') || $f->name;
#	return "/db/get?name=$name;class=Gene";
#	}
#
# GFF3 specific configuration; supplies: feature and glyph.
#    include includes/gene_models-GFF3.track
# Configuration specific for GFF3 entries
#feature  = CDS:WormBase    # or gene with the gene glyph
#glyph    = transcript2     # or gene, but it lacks callbacks
feature      = gene:GLEAN
glyph        = gene
# Tier 2/3 configuration; supplies: title, label, description, citation
# include includes/gene_models-tier2.track
title    = A. suum GLEAN prediction $name
citation = 
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[GLEAN:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[GLEANCDS]
feature      = CDS:GLEAN
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature" }
key          = GLEAN Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  



[GLIMMER]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
#include includes/gene_models.track
key          = GlimmerHMM

# GFF3 specific configuration; supplies: feature and glyph.
#    include includes/gene_models-GFF3.track
# Configuration specific for GFF3 entries
#feature  = CDS:WormBase    # or gene with the gene glyph
#glyph    = transcript2     # or gene, but it lacks callbacks
feature      = gene:GlimmerHMM
glyph        = gene
# Tier 2/3 configuration; supplies: title, label, description, citation
# include includes/gene_models-tier2.track
title    = A. suum GlimmerHMM prediction $name
citation = 
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[GLIMMER:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[GLIMMERCDS]
feature      = CDS:GlimmerHMM
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature " }
key          = GlimmerHMM Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  


[SNAP]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# include includes/gene_models.track
category     = Genes
key          = SNAP
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
#balloon hover  = sub {my $f = shift;
#	                my $name = $f->name; 
#                        my $class = $f->class;
#    		        "url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG";
#	} 
#link = sub {
#	my $f = shift;
#	return if $f->method eq 'RNAz';
#	my $name = $f->attributes('Gene') || $f->name;
#	return "/db/get?name=$name;class=Gene";
#	}
#
# GFF3 specific configuration; supplies: feature and glyph.
#    include includes/gene_models-GFF3.track
# Configuration specific for GFF3 entries
#feature  = CDS:WormBase    # or gene with the gene glyph
#glyph    = transcript2     # or gene, but it lacks callbacks
feature      = gene:SNAP
glyph        = gene
# Tier 2/3 configuration; supplies: title, label, description, citation
# include includes/gene_models-tier2.track
title    = A. suum SNAP prediction $name
citation = 
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[SNAP:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[SNAPCDS]
feature      = CDS:SNAP
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature" }
key          = SNAP Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  






[BLAT]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# include includes/gene_models.track
category     = Genes
key          = Blat
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
#balloon hover  = sub {my $f = shift;
#	                my $name = $f->name; 
#                        my $class = $f->class;
#    		        "url:/db/misc/gbrowse_popup?name=$name;class=$class;type=CG";
#	} 
#link = sub {
#	my $f = shift;
#	return if $f->method eq 'RNAz';
#	my $name = $f->attributes('Gene') || $f->name;
#	return "/db/get?name=$name;class=Gene";
#	}

# GFF3 specific configuration; supplies: feature and glyph.
#    include includes/gene_models-GFF3.track
# Configuration specific for GFF3 entries
#feature  = CDS:WormBase    # or gene with the gene glyph
#glyph    = transcript2     # or gene, but it lacks callbacks
feature      = gene:blat
glyph        = gene
# Tier 2/3 configuration; supplies: title, label, description, citation
# include includes/gene_models-tier2.track
title    = A. suum Blat alignment $name
citation = 
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[BLAT:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[BLATCDS]
feature      = CDS:blat
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature "  }
key          = Blat Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  




################################################
# DNA
################################################
#include includes/dna.track
