package GMap;

use strict;

my @columns = qw/chromosome wbgene molecular_name public_nam start stop strand map_position type/;

sub new {
  my $self = shift;
  return bless {},$self;
}

# parse the simple tab delimited output
# generated by dump_all_markers.pl
# Returns:
#     hash reference of all genes
#     keyed by chromosome, containing an
#     hash ref of all data in the file

sub parse {
  my $self = shift;
  open IN,"all_markers.out";
  my $genes = {};
  while (<IN>) {
    chomp;
    my ($chrom,@stuff) = split("\t",$_);
    my @all = split("\t",$_);  # ooh ugly
    my %hash;
    my $index = 0;
    # map columns into a hash
    foreach (@columns) {
      $hash{$_} = $all[$index];
      $index++;
    }
    push @{$genes->{$chrom}},\%hash;
  }
  return $genes;
}



# return the length of the current chromosome in bp
sub fetch_chromosome_length {
  my ($self,$db,$chrom) = @_;
  my ($segment) = $db->segment(Sequence=>$chrom);
  return $segment->length;
}


# Return the extreme markers on the given chromosome
# according to their physical map position
sub find_maximal_markers_pmap {
  my ($self,$genes) = @_;
  my $low;
  my $high;
  foreach (@$genes) {
    my $start = start($_);
    my $stop  = stop($_);
    next unless ($start && $stop);

    unless ($low && $high) {
      $low  = $_;
      $high = $_;
      next;
    }

    if ($start <= start($low) && $stop <= stop($low)) {
      $low = $_;
    }

    if ($start >= start($high) && $stop >= stop($high)) {
      $high = $_;
    }
  }
  return ($low,$high);
}


# Return maximal markers according to their gmap position
sub find_maximal_markers_gmap {
  my ($self,$genes,$restrict) = @_;
  my $low;
  my $high;
  foreach (@$genes) {
#    if ($restrict) {
#      next unless (type($_) eq $restrict);
#    }
    my $gmap = $_->[7];
    next unless ($gmap);
    unless ($low && $high) {
      $low  = $_;
      $high = $_;
      next;
    }

    if ($gmap <= $low->[7]) {
      $low = $_;
    }

    if ($gmap >= $high->[7]) {
      $high = $_;
    }
  }
  return ($low,$high);
}


# accessors
sub chromosome     { return shift->{chromosome};     }
sub wbgene         { return shift->{wbgene};         }
sub molecular_name { return shift->{molecular_name}; }
sub public_name    { return shift->{public_name};    }
sub start          { return shift->{start};          }
sub stop           { return shift->{stop};           }
sub map_position   { return shift->{map_position};   }
sub type           { return shift->{type};           }
sub strand         { return shift->{strand};         }
