#!/usr/bin/perl
# Author: T. Harris


use lib '../lib';
use strict;

use Ace;
use CGI qw/:standard :html3 escape *table *TR *td *pre *center center/;
use Ace::Browser::AceSubs qw(:DEFAULT Configuration ResolveUrl Toggle AcePicRoot);
use ElegansSubs qw(:DEFAULT GetInterpolatedPosition FetchGene Bestname);
use Bio::Graphics::Browser;
#use Digest::MD5 'md5_hex';
#use File::Path 'mkpath';


use vars qw($DB $DBGFF $SCRIPT $IMAGES  %data);

my $float                 = 4;  # Number of sig figs to use when positioning markers
my %methods2labels = (
		      cloned_mutant              => 'named gene',
		      interpolated_gmap_position => 'predicted gene',
		      experimental_gmap_position => 'mapped mutant');

my @classes = qw/loci snps rearrangements/;

# GFF features to fetch
# Cloned markers (CGC name and CDS)
use constant MARKERS_SOURCE => 'map_position';
use constant CLONED_GENES => 'cloned_mutant:' . MARKERS_SOURCE;

# Mapped markers (no CDS)
use constant MAPPED_GENES => 'experimental_gmap_position:' . MARKERS_SOURCE;

# Predicted markers (no CGC_name or Other_name);
use constant INTERPOLATED_GENES => 'interpolated_gmap_position:' . MARKERS_SOURCE;

# SNPs
#use constant PREDICTED_SNPS => 'polymorphism:predicted';
#use constant VERIFIED_SNPS  => 'polymorphism:verified';
#use constant PREDICTED_RFLPS => 'rflp_polymorphism:predicted';
#use constant VERIFIED_RFLPS  => 'rflp_polymoprhism:verified';
use constant SNIP_SNPS  => 'rflp_polymorphism';
use constant SNPS       => 'polymorphism';


# Rearrangements
use constant DELETIONS      => 'deletion:rearrangement';
use constant DUPLICATIONS   => 'duplication:rearrangement';
use constant TRANSLOCATIONS => 'translocation:rearrangement';


use constant GMAP_SCALE      => 1000000;   # value to convert GFF coordinates into GMap values

END {
    undef %data;
}

$SCRIPT = url(-absolute=>1);
$DB      = OpenDatabase() || AceError("Couldn't open database.");
$DBGFF   = OpenGmapGFF($DB) || AceError("Couldn't open GFF database.");

print_header();
establish_interval()     if (param);
display_instructions()   if (!param);
display_search_form()    if (!param);
PrintBottom();

#################
#  BEGIN SUBS  ##
#################
sub establish_interval {
    my $query = url_param('recenter') || param('start');
    
    return error('Please provide a starting locus or chromosomal position.') unless $query;

  # get the position of the provided locus, gene, or chromosomal position
  # For chromosome positions or genes, a flag is returned so that I can display
  # a row in the middle of the dataset corresponding to the query position
  my ($start,$flag) = get_coordinates($query);
  return unless $start;
  # recenter the interval
  # Center pos is used only for single term searches
  my ($chromosome,$center_pos) = @$start;
  my $stop;
  
  # Was a stop position provided?
  my $default_interval = Configuration->Interval_default_size;
  if (param('stop')) {
    ($stop) = get_coordinates(param('stop'));
    if ($start->[0] ne $stop->[0]) {  # compare chromosomes
      error(param('start'),"is on chromosome $start->[0], but" .
	    param('stop'),"is on chromosome $stop->[0].");
      return;
    }
  } else {
    # Let's set up our own interval, centered on the provided position
    $start->[1]  = $center_pos + $default_interval/2;
    $stop ->[1]  = $center_pos - $default_interval/2;
    $stop ->[0]  = $chromosome;
  }

  # don't dump unless we have start and stop
  return unless $start and $stop;
  ($start,$stop) = ($stop,$start) if $start->[1] > $stop->[1]; # flippity flop
  $data{start} = $start;
  $data{stop}  = $stop;

#  my $max = Configuration->Interval_max_search;
#  my $range = ($stop->[1] - $start->[1]);
#  return error("The specified interval exceeds the $max cM limit. Please reduce the size of your interval.") if ($range > $max);;
  
  # If the flag is defined, user searched for a chromosomal position
  # or a sequence.  Stuff a hilited row into the table.
  # (Flag contains the position of the query)
  # Loci are handled a bit differently since those rows carry more info...
#  if ($flag) {
#  # recenter if necessary
#  my $center_locus = param('start') || url_param('recenter');
#
#    my $recenter = a({-href=>"$SCRIPT?recenter=$center_locus"},"Recenter this view on $center_locus");
#    push (@rows,['&nbsp;',$center_locus,$flag,'search term',$recenter]);
#  }
  
  dump_interval($center_pos,$flag);
}


sub get_coordinates {
  my $marker = shift;

  # easiest case: interval is defined in format chromosome:position
  if ($marker =~ /([IXV]+):([\d.-]+)/) {
    $data{center_locus} = $marker;
    $data{center_pos}   = $2;
    return ([$1,$2],$2);
  }

  # Perhaps a user has searched with an allele (or polymorphism)
  if (my $allele = $DB->fetch(-class=>'Variation',-name=>$marker)) {
    # SNPs now have a calculated map position
    my ($chromosome,$position) = GetInterpolatedPosition($DB,$allele);
    $data{center_locus} = $allele;
    $data{center_pos}   = $position;
  }

  # Is this a gene?
  # Probably the most common case now
  my ($obj,$bestname) = FetchGene($DB,$marker);
  if ($obj) {
      # Ugh.   Get a filled version.
      if ($obj->class eq 'Gene') {
	  $obj = $DB->fetch(-class=>'Gene',
			    -name => $obj,
			    -fill => 1);
      }
      my ($chromosome,undef,$position,undef,$error) = eval{$obj->Map(1)->row};
      if ($position) {
	  $data{center_locus} = $obj;
	  $data{center_pos}   = $position;
	  return ([$chromosome,$position],$position);
      } else {
	  error("The sequence named " . ObjectLink($obj)
		. " does not have an interpolated genetic position.");
	  return;
      }
  }
  error("$marker is not a genetic position, gene name, or sequence name known to the database.");
  return;
}



sub dump_interval {
  my ($center_locus,$flag) = @_;

  print hr;
  my %display;
  foreach (qw/start stop/) {
      if (param($_) == join(':',@{$data{$_}})) {
	  my ($start_chrom,$start_pos,$stop_chrom,$stop_pos) = start_and_stop();
	  my ($chrom,$pos) = @{$data{$_}};
	  $display{$_} = "$chrom:" . reformat($pos);
      } else {
	  my ($chrom,$pos) = @{$data{$_}};
	  $display{$_} = param($_) . ' ' . join(':',$chrom,reformat($pos));
      }
  }
  
  print h3("Displaying interval: $display{start} to $display{stop}");

  my ($start_chrom,$start_pos,$stop_chrom,$stop_pos) = start_and_stop();

  # Transmogirfy the start and stop values
  my ($start,$stop) = GMAP2GFF($start_pos,$stop_pos);

  # reverse the start and stop if necessary
  ($start,$stop) = ($stop,$start) if ($start > $stop);

  # Use absolute coordinates
  $DBGFF->absolute(1);

  # Fetch a segment in absolute coordinates (else the negative values
  # will be relative to the reference sequence).
  my $segment = $DBGFF->segment(-name  => $start_chrom,
				-start => $start,
				-stop  => $stop,
				-absolute => 1);

  # Debugging
  print $start_chrom,br;
  print $start,br;
  print $stop,br;
  print $segment,br;
  print join(br,$segment->features),br;
  print $segment->length,br; 
#  my $t = $DBGFF->segment(-name=>'uCE3-994',-class=>'Variation');
#  print $t;
  
  print "$start_chrom $start $stop";
  my @features;
  if (param('loci')) {
      @features = $segment->features(-types => [INTERPOLATED_GENES,MAPPED_GENES,CLONED_GENES]);
  }
  
  if (param('snps')) {
      push @features,$segment->features(-types=> [SNIP_SNPS,SNPS]);
  }
  
  if (param('rearrangements')) {
      push @features,$segment->features(-types=> [DELETIONS,DUPLICATIONS,TRANSLOCATIONS]);
  }
  
  if (@features == 0) {
    print h3('There were no markers within this interval that matched your criteria.');
    print hr;
    display_search_form();
    PrintBottom;
    exit;
  } 

 
  my $total = scalar @features;
  print h3("$total markers within this interval match your criteria.");

  # Draw a gbrowse-img
  image($segment);
  
  print p('To retrieve additional information for any locus or loci, select the checkbox to the left of the locus of interest.');
  print startform({-action=>'batch_genes'});
  print start_center;
  print start_table({-border=>1,-width=>'100%'}),
  TR({-class=>'datatitle'},th('&nbsp;'),
     th('Molecular name'),
     th('CGC name'),
     th('Position'),
     th('Type'),
     th('Description'));
  
  # Dump 'em as we go....
  my $c;
  foreach (sort { $a->start <=> $b->stop } @features) {
      $c++;
      my $start = $_->attributes('GMap_start');
      my %data;
      if ($_->source eq 'map_position') {
	  %data = process_marker($_);
      } elsif ($_->source eq 'rearrangement') {
	  %data = process_rearrangement($_);
      } else {
	  %data = process_snp($_);
      }
      
      # NEED TO MARK UP THOSE ROWS WHICH WERE CORRESPOND TO THE SEARCH TERMS
      ##### $data{label} .= " (search term)" if $_->name eq $center_locus || $bestname eq param('stop');
      my $checkbox =  checkbox({-name=>'retrieve',
				-value=>$_->name,
				-label=>''});
      
      # Change the hiliting for different loci types (including searched-for loci)
      # Hilite the searched-for loci or add a row for position
      my @args;
      @args = $data{label} =~ /cloned\smutant/i ? (-class=>'databody')  : ();
      @args = $data{label} =~ /verified/i ? (-class=>'databody')  : @args;
      @args = $data{label} =~ /search\sterm/i   ? (-class=>'highlight') : @args;

      add_navigation('start') if ($c == 1);
      my $description = join(br,$data{description},$data{alleles},$data{strains});
      
      print TR({@args},
	       td($checkbox),
	       td($data{molecular_name}),
	       td($data{cgc_name}),
	       td($start),
	       td($data{label}),
	       td($description));

      add_navigation('stop') if ($c == scalar @features);
  }   
  
  print end_table;
  print submit({-name=>'Retrieve additional information on selected loci'}),
    endform;
  print hr,end_center;
  print h3('Key'),
    ul(
       li('Loci that have an absolute position (includes cloned genes, SNPs, and transposons) are shaded in blue.'),
       li('Reference alleles, where known, are presented in ',
	  b('boldface'),'.'),
       li("'Snip-SNPs' are SNPs detectable by restriction digest."));
}

sub image {
    my $segment = shift;
    my $browser = Bio::Graphics::Browser->new or die;
    $browser->read_configuration(Configuration->Gff_conf)  or die "Can't read gff configuration";
    $browser->source('elegans_gmap');

    $segment->absolute(1);
    my $ref   = $segment->ref;
    my $start = $segment->start;
    my $stop  = $segment->stop;
    
    my @tracks;
#    push (@tracks,qw/CLONED_LOCI MAPPED_LOCI INTERPOLATED_GENES/) if param('loci');
    push (@tracks,qw/ALL_LOCI/) if param('loci');
    push (@tracks,qw/SNIP_SNPS SNPS/) if param('snps');

    my $img = $browser->render_panels(segment => $segment,
				    tracks  => \@tracks,
				    do_map  => 1,
				      #tmpdir  => AppendImagePath('markers')
				      );

    # NOW USING SQUID / URL
    #    my $host = 'http://' . $ENV{SERVER_NAME};
    #    $img =~ s/\/ace_images/$host\/ace_images/g;

    my ($ref,$gmap_start,$ref_stop,$gmap_stop) = start_and_stop();
    print p({-align=>'center'},
	    a({-href=>sprintf(Configuration->Gmapgff_url,"$ref:$gmap_start,$gmap_stop")},
	      b("$ref:$gmap_start..$gmap_stop: Click Here to Browse")),
	    br,
	    $img
	    );
    
}


sub add_navigation {
    my $location = shift;
    my ($chrom,$pos)  = @{$data{$location}};
    my $params;
    foreach (@classes) {
	$params .= ";$_=1" if param($_);
    }
    print TR(td({-colspan => 8,-align=>'center',-class=>'databody'},
		a({-href=>"$SCRIPT?recenter=$chrom:$pos$params"},"Recenter this view on " . reformat($pos))));
}





sub start_and_stop {
  my ($start_chrom,$start_pos) = @{$data{start}};
  my ($stop_chrom,$stop_pos)   = @{$data{stop}};
  return ($start_chrom,reformat($start_pos),$stop_chrom,reformat($stop_pos));
}

sub reformat { return sprintf("%2.2f",shift); }

sub error { print h3({-class=>'error'},p(shift)); }


sub fetch_alleles {
  my $gene = shift;
  my $ref = $gene->Reference_Allele;
  my $alleles = join(', ',map { ($_ eq $ref) ? b(ObjectLink($_)) : ObjectLink($_) } $gene->Allele);
  return b("Alleles: ") . $alleles if $alleles;
  return undef;
}


sub fetch_strains {
  my $gene = shift;
  my @strains = $gene->Strain;
  return (b('Strains: ') . a({-href=>ObjectLink($gene,'Strain')},scalar @strains . ' strain(s)') 
	  . " carrying " .a({-href=>Object2URL($gene)},Bestname($gene))) if (@strains);
  return undef;
}

sub print_header {
  PrintTop(undef,undef,undef,
	   '-Title' =>'Wormbase: Genetic Marker Search',
#	   '-Target'=>'_top',
	   '-Class' =>'search'); 
  print h2('Markers Search');
  return;
}



sub display_search_form {
  print
    start_center,
      start_form,
	table({-width=>'70%',-cellpadding=>'1',-cellspacing=>'1'},
	      TR(th({-colspan=>2,-class=>'searchtitle'},'Search Parameters')),
	      TR(
		 th({-class=>'searchtitle'},'From position/landmark: '),
		 td({-class=>'searchbody',-align=>'center'},
		    textfield(-name=>'start'),
		    ' to ',
		    textfield(-name=>'stop'),
		    br,
		    i('Examples: ' .
		      join(', ',
			   a({-href=>"$SCRIPT?recenter=unc-26;snps=1;loci=1"},'unc-41'),
			   a({-href=>"$SCRIPT?recenter=I:1.5;snps=1;loci=1"},'I:1.5'),
			   a({-href=>"$SCRIPT?recenter=Y47H9C;snps=1;loci=1"},'Y47H9C'))))),
#	      TR(th({-class=>'searchtitle'},
#		    'Loci'),
#		 td({-class=>'searchbody'},
#		    checkbox(-name=>'loci_predicted',
#			     -checked=>1,
#			     -value=>'ON'),
#		    checkbox(-name=>'loci_cloned',
#			     -checked=>1,
#			     -value=>'ON'),
#		    checkbox(-name=>'loci_mapped',
#			     -value=>'ON'),
#		   )),
#
#	      TR(th({-class=>'searchtitle'},
#		    'Polymorphisms'),
#		 td({-class=>'searchbody'},
#		    checkbox(-name=>'snps_verified',
#			     -checked=>1,
#			     -value=>'ON'),
#		    checkbox(-name=>'snps_predicted',
#			     -checked=>1,
#			     -value=>'ON'),
#		    checkbox(-name=>'snips_verified',
#			     -checked=>1,
#			     -value=>'ON'),
#		    checkbox(-name=>'snips_predicted',
#			     -checked=>1,
#			     -value=>'ON'),
#		   )),
	      TR(th({-class=>'searchtitle'},'Features'),
		 td({-class=>'searchbody'},
		    checkbox(-name=>'loci',
			     -checked=>1,
			     -value=>'ON'),br,
		    checkbox(-name=>'snps',
			     -label => 'polymorphisms',
			     -checked=>1,
			     -value=>'ON'),br,
		    checkbox(-name=>'rearrangements',
			     -value=>'ON'),
		   )),
	      TR(th({-colspan=>2,
		     -align=>'right'},
		    reset('Reset'),
		    submit('Search')))),
		      end_form,
			end_center,hr;
  display_explanation();
  return;
}


sub display_instructions {
  my $max              = Configuration->Interval_max_search;
  my $default_interval = Configuration->Interval_default_size;

  print p("This page is designed to assist in the selection of SNPS
  and visible genetic markers for mapping experiments. Provided with a
  genetic interval, it will display all visible markers and SNPs
  within that interval, as well as strains carrying those SNPs. The
  severity of markers can be restricted to avoid conflicts with the
  mutation of interest.  To simplify in the acquisition of strains,
  strains can be restricted to those directly available from the
  CGC.");
  
  print ul(
	   li('Specify the interval using the names of two genetically
	   defined loci (',cite('unc-70'),'), or predicted genes
	   (JC8.10a).'),
	   li('Alternatively, you may provide genetic map positions using ' . i('chromosome:position') . '  notation (III:-0.685).'),
	   li("Entering a single value into the start position will
	   center the search on a window $default_interval cM wide."),
	   li(a({-href=>'#how'},"Learn more")," about how this script works."));
  return;
}



sub display_explanation {
  print h3(a({-name=>'how'},'How This Works'));
  print p(<<END);
The WormBase Consortium has interpolated the physical (sequence)
coordinates of each genetically defined gene and polymorphism into the
genetic map, thereby creating an interpolation between the two.
END

print p(<<END);
After determining the range specified, this script dumps out all mapped mutants
within the range.
END
  
  print p(<<END);
Please note that since not all genetic loci are mapped relative to one
another, the order of genetic loci presented in chromosomal
coordinates may not actually reflect the physical order of these
genes. When using this search, it is especially important to remember
that if the genetic position of one of the provided loci is known with
only low confidence, the span the interval provides may be skewed.  In
these cases, providing loci with established physical coordinates may
more accurately display the interval of interest.
<p>
Similarly, interpolating sequence features like polymorphisms onto the
genetic map results in a compression of distances, placing many
features on top of one another. In these cases, the Genome Browser is
useful for visualizing the order of polymorphisms within a span.
END
}


# Convert genetic map values into those appropriate for the GFF database
sub GMAP2GFF {
  my ($start,$stop) = @_;
  return (sprintf("%8.${float}f",$start) * GMAP_SCALE,
	  sprintf("%8.${float}f",$stop) * GMAP_SCALE);
}

sub GFF2GMAP {
  my ($start,$stop) = @_;
  return (sprintf("%2.2f",$start) / GMAP_SCALE,
	  sprintf("%2.2f",$stop) / GMAP_SCALE);
}


sub process_snp {
  my $feature = shift;
  my $type     = ($feature->method =~ /RFLP/) ? 'Snip-SNP' : 'SNP';
  $data{label} = $feature->source . " $type";
  $data{description} = ($type eq 'Snip-SNP') ? 'Detection: restriction digest' : 'Detection: sequencing';
  $data{molecular_name} = a({-href=>Object2URL($feature->name,'Variation')},$feature->name);
  return %data;
}

sub process_rearrangement {
  my $feature = shift;
  my $type     = $feature->attributes('Type');
  $data{label} = $type;
  $data{description} = $feature->attributes('GMap_range');
  $data{molecular_name} = a({-href=>Object2URL($feature->name,'Rearrangement')},$feature->name);
  return %data;
}

sub process_marker {
  my $feature = shift;
  my %data;
  my $cgc_name       = $feature->attributes('CGC_name');
  my $molecular_name = $feature->attributes('Sequence_name');

  $data{cgc_name}       = a({-href=>Object2URL($feature->name,'Gene')},$cgc_name) if $cgc_name;
  $data{molecular_name} = a({-href=>Object2URL($feature->name,'Gene')},$molecular_name) if $molecular_name;

  $data{label}     = $methods2labels{$feature->method};

  # Darn:  need to cull some data from ace....
  my $object        = $DB->fetch(Gene => $feature->name,-filltags=>[qw/Reference_allele Alleles Strain/]);
  $data{description} = (sort { length $b <=> length $a } $object->Phenotype)[0] if $object->Phenotype;
  $data{alleles}   = fetch_alleles($object);
  $data{strains}   = fetch_strains($object);
  return %data;
}
