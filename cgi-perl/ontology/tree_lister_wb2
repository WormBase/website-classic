#!/usr/bin/perl

### main ###

use DB_File;
use strict;
use lib '/usr/local/wormbase/website-classic/cgi-perl/lib';
use vars qw/$query $query_type $ontology $obo $script_url $format %ontology2ace $target $DB/;
use Ace::Browser::AceSubs qw/:DEFAULT/;
use CGI qw/:standard *table *TR *td *div/;
use Ace::Browser::SearchSubs qw/:DEFAULT/;
use ElegansSubs qw/:DEFAULT !TypeSelector/;
use constant ISA    => '/images/ontology/is_a_serif_small.png';
use constant PARTOF => '/images/ontology/part_of_serif_small.png';


my $db = OpenDatabase() or warn "Couldn't open the acedb handle";
my $version = $db->version;
my $data_directory = "/usr/local/wormbase/databases/$version/ontology/";

my %id2parents = build_hash($data_directory.'id2parents.txt');
my %id2name = build_hash($data_directory.'id2name.txt');
my %parent2ids = build_hash($data_directory.'parent2ids.txt');
my %id2association_counts = build_hash($data_directory.'id2association_counts.txt');
my %id2total_associations = build_hash($data_directory.'id2total_associations.txt');
# my $is_test = 1;

# my %id2parents;
# my %id2name;
# tie (%id2parents, 'DB_File', './id2parents.dat') or die;
# tie (%id2name, 'DB_File', './id2name.dat') or die;
# my $ontology_id = param('$query');

END {
  undef $query;
  undef $query_type;
  undef $ontology;
  undef $script_url;
  undef $obo;
  undef $format;
  undef %ontology2ace;
  undef $target;
  undef $DB;
}

#$DB = OpenDatabase() || AceError("Couldn't open database.");

#$DB = Ace->connect(-host=>'localhost',-port=>2005);

# Pull out some parameters
$query      = param('name');
$query_type = param('query_type');
my $is_test = param('is_test');

$ontology = id2ontology($query);
# $ontology = 'test';
$format  = param('format');
$target = '_new';
my @path_array = ($query);

# Map ontologies to their corresponding ace_classes
%ontology2ace = (
		 go => 'GO_term',
		 po => 'Phenotype',
		 ao => 'Anatomy_term');
		
my %ontology2page = (
				 go => 'ontology/gene',
				 po => 'misc/phenotype',
				 ao => 'ontology/anatomy');	

if ($is_test){
	$script_url = '/db/ontology/tree_lister';
}
else{
	$script_url = '/db/'.$ontology2page{$ontology};
}

		
# Set up the document.
#print start_html();
establish_page();

# Only display the page if we have an ontology and query type selected
if ($query) {
 	my @paths = &call_list_paths(\@path_array,\%id2parents,\%id2name);
	my $path_count = @paths;
	# print "PATHS: @paths<br>";
	my $tab = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";

	print "There is(are) $path_count path(s) for $query ($id2name{$query})<br><br>";
	print "<a name=top>";
	print "Go to path:<br><br>";
	my $path_counter = 0;
	foreach my $path_number (1 .. $path_count){
			# $path_links =  $path_links.'\<a href \=\"#'.$path_number.'\"\>'.$path_number.'\<\/a\> \&nbsp\;';
			$path_counter++;
			my $path_href = '#'.$path_number;
			# my $path_link = "&nbsp;".$path_number."&nbsp;";
			print a({href=>$path_href},$path_number);
			print "&nbsp;&nbsp;";
			if ($path_counter > 27){
				print "<br>";
				$path_counter = 0;
			}
		}
print "<br>";

	my $path_number = 1;
	foreach my $path (@paths){
		print "<br>";
		print hr;
		print "path number: $path_number";
		print "<a name = $path_number><br>";
		# print "$path<br><br>";
		my @steps = split '%',$path;
		my $step_count = @steps;
		my $end = pop @steps;
		my $end_parent = pop @steps;
		my $end_string = "-&".$end."&".$id2name{$end};
		my $end_link = ontology_link($script_url,$end_string,$is_test,\%id2association_counts, \%id2total_associations);
		my $print_tabs = 0;
		my ($end_parent_relationship,$end_parent_id,$end_parent_term) = split '&', $end_parent;
		my ($end_id,$end_term) = split '&', $end;
		my $term_siblings = $parent2ids{$end_parent_id};
		my $term_children = $parent2ids{$end_id};
		## print ancestors
		foreach my $step (@steps){
			my $url_string = ontology_link($script_url,$step,$is_test,\%id2association_counts,\%id2total_associations);
			tab($print_tabs);
			print "$tab$url_string<br>";
			$print_tabs++;
		}
		if($end_parent){
			my $end_parent_link = ontology_link($script_url,$end_parent,$is_test,\%id2association_counts,\%id2total_associations);
			tab($print_tabs + 1);
			print "$end_parent_link";
			print "<br>";
		}
		
		#print term
		tab($step_count);
		print "$end_link";
		print "<br>";
		$path_number++;
		
		#print term children
		if($term_children){
			my @term_children = split '\|', $term_children;
			foreach my $term_child (@term_children){
				my $term_child_string = "--&".$term_child."&".$id2name{$term_child};
				my $term_child_link = ontology_link($script_url,$term_child_string,$is_test,\%id2association_counts,\%id2total_associations);
				tab($step_count + 1);
				print "$term_child_link";
				print "<br>";
			}
		}
		
		#print term siblings
		if($term_siblings){
			my @term_siblings = split '\|', $term_siblings;
			foreach my $term_sibling (@term_siblings){
				if($end =~ m/$term_sibling/){
					next;
				}
				else{
					my $term_sibling_string = "-&".$term_sibling."&".$id2name{$term_sibling};
					my $term_sibling_link = ontology_link($script_url,$term_sibling_string,$is_test,\%id2association_counts,\%id2total_associations);
					tab($step_count);
					print "$term_sibling_link";
					print "<br>";
				}
				
			}
		}
		print "<a href=#top>Go to top</a><br>";
		
	} ## end foreach my $path (@paths)
    }

print end_html;

exit;

### end main ####

sub wm_browser_links {
	my ($id,$ontology,$associations_count) = @_;
	
	#my $server = "http://dev.wormbase.org/";
	my $server = "/";
	#### data #####
	my %wm_object_ontology_urls;

	$wm_object_ontology_urls{'go'}{'gene'} =  $server.'biomart/martview?VIRTUALSCHEMANAME=default&ATTRIBUTES=wormbase_gene.default.attributes.gene|wormbase_gene.default.attributes.public_name|wormbase_go_term.default.attributes.go_term|wormbase_go_term.default.attributes.term&FILTERS=wormbase_go_term.default.filters.go_term_ancestor."$$$$"';

	$wm_object_ontology_urls{'ao'}{'gene'} = $server.'biomart/martview?VIRTUALSCHEMANAME=default&ATTRIBUTES=wormbase_expr_pattern.default.attributes.gene|wormbase_expr_pattern.default.attributes.gene_public_name|wormbase_anatomy_term.default.attributes.anatomy_term|wormbase_anatomy_term.default.attributes.term_anatomy_name&FILTERS=wormbase_anatomy_term.default.filters.anatomy_term."$$$$"',

	$wm_object_ontology_urls{'po'}{'gene'} =
	$server.'biomart/martview?VIRTUALSCHEMANAME=default&ATTRIBUTES=wormbase_gene.default.attributes.gene|wormbase_gene.default.attributes.public_name|wormbase_phenotype.default.attributes.phenotype|wormbase_phenotype.default.attributes.name_primaryname_phenotypename&FILTERS=wormbase_gene.default.filters.rnai_observed_count."only"|wormbase_phenotype.default.filters.phenotype."$$$$"';

	$wm_object_ontology_urls{'ao'}{'expr_pattern'} =
	$server.'biomart/martview?VIRTUALSCHEMANAME=default&ATTRIBUTES=wormbase_expr_pattern.default.attributes.expr_pattern|wormbase_expr_pattern.default.attributes.gene|wormbase_expr_pattern.default.attributes.gene_public_name|wormbase_anatomy_term.default.attributes.anatomy_term|wormbase_anatomy_term.default.attributes.term_anatomy_name&FILTERS=wormbase_anatomy_term.default.filters.anatomy_term."$$$$"';

	$wm_object_ontology_urls{'po'}{'rnai'} = $server.'biomart/martview?VIRTUALSCHEMANAME=default&ATTRIBUTES=wormbase_rnai.default.attributes.rnai|wormbase_rnai.default.attributes.gene|wormbase_phenotype.default.attributes.phenotype|wormbase_phenotype.default.attributes.name_primaryname_phenotypename&FILTERS=wormbase_phenotype.default.filters.phenotype."$$$$"';

	$wm_object_ontology_urls{'phenotype'}{'variation'} = $server.'biomart/martview?VIRTUALSCHEMANAME=default&ATTRIBUTES=wormbase_variation.default.attributes.variation|wormbase_phenotype.default.attributes.phenotype|wormbase_phenotype.default.attributes.name_primaryname_phenotypename&FILTERS=wormbase_variation.default.filters.species_selection."Caenorhabditis elegans"|wormbase_phenotype.default.filters.phenotype."$$$$"';

	my %ontology_wm_objects = (
			       'go' => [qw(gene)],
			       'ao' => [qw(expr_pattern gene )],
			       'po' => [qw(gene rnai variation)]
	    );	

	#### end data ######
	
	my $objects_ar = $ontology_wm_objects{$ontology};
	my %wm_urls;
	foreach my $object (@{$objects_ar}){
		my $wga_url = $wm_object_ontology_urls{$ontology}{$object};
		$wga_url =~ s/\$\$\$\$/$id/;
		$wm_urls{$object} = $wga_url;
	}
	
	my $association_anchor;
	my $wm_anchor;
	my @wm_links;
	
	foreach my $object (keys %wm_urls){
			$wm_anchor = a({-href=>$wm_urls{$object},-target=>'_NEW'},$object);
			push @wm_links, $wm_anchor;
		}
	
	my $wm_link_line = join " | ", @wm_links;	
	
	return $wm_link_line;
				
}

sub id2ontology{
	my $id = shift @_;

	my $ontology;
	
	if ($id =~ m/GO/){
		$ontology = 'go';		
	}
	elsif ($id =~ m/Phenotype/){
		$ontology = 'po';
	}
	elsif ($id =~ m/WBbt/){
		$ontology = 'ao';
	}
	####################################
	return $ontology;
}

sub ontology_link{
	my ($script_url,$line,$test,$id2association_counts_hr,$id2total_association_counts_hr) = @_;
	my ($relationship,$id,$term) = split '&', $line;
	my $ontology = id2ontology($id);
	my $association_count = ${$id2association_counts_hr}{$id};
	my $total_association_count = ${$id2total_association_counts_hr}{$id};
	my $url = "$script_url\?name\=$id";
	if ($test){
		$url = $url."&is_test=1";
	}
	
	my $association_sum = $total_association_count; 
	
	my $wormmart_links = "";
	my $associations_data = "";
	
	if ($association_sum > 0) { 
	
		$associations_data = "\(association\(s\) - to term\: " . $association_count .  ", total associations\: " .$association_sum. ")";  ##."\; total\:id\: " . $id . " tac\: " . $total_association_count . 
	
	}
	
	#if ($association_count > 0) {
	#	my $wormmart_anchors = wm_browser_links($id,$ontology,$association_count);
	#	$wormmart_links = "\(association\(s\)\: ".$association_count." ".$wormmart_anchors.")";
	#}
	
	
	
	my $anchor = a({-href=>$url,-target=>'_NEW'},$term);
	my $return_string = "<b>$relationship</b>&nbsp;&nbsp;".$anchor." ".$associations_data;  ## $wormmart_links
	return $return_string;
}



sub tab{
	my ($step_count) = @_;
	my $tab = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
	my $counter = 0;
	while ($step_count > $counter){
		print "$tab";
		$counter++;
	}
}

sub build_hash{
	my ($file_name) = @_;
	open FILE, "<./$file_name" or die "Cannot open the file: $file_name\n";
	my %hash;
	foreach my $line (<FILE>) {
		chomp ($line);
		my ($key, $value) = split '=>',$line;
		$hash{$key} = $value;
	}
	return %hash;
}



sub establish_page {
    print header();
	print start_html();
}

sub call_list_paths {
	
	use DB_File;
	
	my ($path_array,$id2parents_ref,$id2name_hr) = @_;
	my @output;
	my $output_ar = \@output; 
	our %id2parents = %{$id2parents_ref};
	our %id2name = %{$id2name_hr};
	&list_paths($path_array,$output_ar);

}

sub list_paths {

	## enter array
	
	my ($destinations_ar, $output_ar) = @_;
	my @destinations = @{$destinations_ar};
	my @output_array = @{$output_ar};
	my @path_builds;
	
	if (!(@destinations)){
		# print "Bye\n";
		## output paths
		# print "output path\n";
		# my $path_counter = 0;
		my @return_data;
		foreach my $output_path (@output_array){					
				my $name_path = '';
				my $full_info_name_path = '';
				my @destination = split '%',$output_path;
				while (@destination){
					my $step = shift @destination;
					my $old_step = $step;
					$step =~ s/^.*&//;
					$name_path = $name_path."|".$id2name{$step};
					$full_info_name_path = $full_info_name_path. "%".$old_step."&".$id2name{$step};
					
				}
				# $path_counter++;
				# print "========\ \ \ $path_counter\n";
				# print "$name_path\n";
				# print "========\n";
				# print "$output_path\n";
				# print "========\n";
				push @return_data,$full_info_name_path;
				# # $path_counts++;
			}
		return @return_data;
	}
	else {
		## get path from entered array
		foreach my $destination (@destinations){
			# print "DESTINATION\:$destination\n";
			## get term at head of the path
			my ($child) = split '%',$destination;
			# my $discard;
			$child =~ s/^.*&//;
			# ($discard,$child) = split '\&',$child;
			# print "$child\n";
	  		my $parents = $id2parents{$child};
			if($parents){
				## get parents
				# print "PARENTS\:$parents\n";
				my @parents = split '\|',$parents;
				foreach my $parent (@parents) {
					## append parent to the rest of the path
					# print "append $parent to $child\n";
					my $updated_path = $parent.'%'.$destination;
					push @path_builds, $updated_path;
					## load path into array
				}
				
			}
			else {
				# print "FOR OUTPUT\:$destination\n";
				push @output_array, $destination;
			}
		} ### end foreach my $destination (@destinations)
		
		### print paths
		## enter array into program recursively
		list_paths(\@path_builds,\@output_array);
	}

}



