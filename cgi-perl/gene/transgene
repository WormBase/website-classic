#!/usr/bin/perl
##############################################################
# REIMPLEMENTATION:                                          #
#    THIS SCRIPT IS NOW FROZEN! (v1.17)                      #
#       Please do not make edits to it.                      #
#       Frozen by: tharris on 02.09.2008                     #   
##############################################################

# name: transgene (@ /usr/local/wormbase/cgi-perl/gene)
# author: Marcela Tello (adapted from strain script)
# date: April 2, 2003

### what this script does is to display a summary of the information
### available for a given worm Transgene in a standarized 2-column
### blue/yellow table format.

use strict;
use lib '../lib';
use ElegansSubs qw/:DEFAULT Bestname filter_references filter_and_display_references format_reference format_references/;
use Ace::Browser::AceSubs;
use CGI qw(:standard *table escape);
use WormBase;
use vars qw/$WORMBASE $transg/;

END {
  undef $WORMBASE;
  undef $transg;
}

$transg = OpenPageGetObject('Transgene','Transgene Summary',1);

StartCache();

$WORMBASE = WormBase->new();
$WORMBASE->print_prompt(-message  => 'Specify a transgene such as',
			-class    => 'Transgene',
			-examples => [qw/adEx1267 gmIs13 cgc4781Is1/]);

if ($transg) {
    StartDataTable;

  StartSection('Transgene');
  SubSection('' => $transg->name);

	my $transgene_evidence;
	eval{$transgene_evidence = $transg->Evidence;};

  if ($transgene_evidence) {
    StartSection('Evidence');
    SubSection('' => $transg->Evidence);
  }

  if ($transg->Summary) {
    StartSection('Summary');
    SubSection('' => eval { $transg->Summary } );
  }

#    if ($transg->Driven_by) {
	my $driven_by = $transg->Driven_by_gene;
	StartSection('Driven by');
	
	my $transgene_driven_by;
	eval{$transgene_driven_by = $transg->Driven_by_construct};
	
	SubSection('Driven by sequence',$transgene_driven_by);
	SubSection('Driven by gene',join(", ",map { ObjectLink($_,Bestname($_)) } $transg->Driven_by_gene));
 #   }
    
  if ($transg->Reporter_product) {
    
    StartSection('Reporter Data');

    my @reporter = $transg->Reporter_product;
    my $reporter = join ('',@reporter) if (@reporter);

    if ($reporter =~ /GFP/) {
      SubSection('Reporter product' => shift (@reporter));
    } elsif ($reporter =~ /LacZ/) {
      SubSection('Reporter product' => shift (@reporter));
    } elsif ($reporter =~ /Other_reporter/) {
      SubSection('Other reporter product' => $transg->Other_reporter);
    }
      SubSection('C. elegans gene'     => $transg->Gene);
      
      my $transgene_cds;
      eval{$transgene_cds = $transg->CDS};
      
      SubSection('C. elegans sequence' => $transgene_cds);
  }


#  if ($transg->Isolation) {

    StartSection('Isolation');
    SubSection('Author'                   => $transg->Author);
    SubSection('Clone'                    => $transg->Clone);
    SubSection('Fragment'                 => $transg->Fragment);
#    SubSection('Injected into CGC strain' => $transg->Injected_into_CGC_strain);
    SubSection('Injected into'            => $transg->Strain);
#    my $other = $transg->Integrated_by;
#    if ($other =~ /Other_integration_method/) {
#					     SubSection('Integrated by'            => $transg->Integrated_by->right);
#					    } else {
#					      SubSection('Integrated by'            => $transg->Integrated_by);
#					    }
 # }
  

#  if ($transg->Location) {
#    StartSection('Location');
#    SubSection('' => map {ObjectLink($_,
#				     $_ . '. ' .eval{$_->Representative->Standard_name . " (".$_->Address(2).')'})
#			} $transg->Location);
#  }

  if ($transg->Strain) {
    StartSection('Strain');
    SubSection('' => $transg->Strain);
  }

  if ($transg->Map) {
    StartSection('Map');
    SubSection('' => $transg->Map);
  }

  if ($transg->Mapping_data) {
   
    StartSection('Mapping Data');

    SubSection('2-point'                 => map {
                                                 my $genotype = $_->Genotype;
						 "$genotype"
						} $transg->get('2_point'));
    SubSection('Multi-point'             =>  map {
                                                 my $genotype = $_->Genotype;
						 "$genotype"
						} $transg->Multi_point);
  }

  if ($transg->Phenotype) {
    StartSection('Phenotype');
  	  #phenotype evidence
    my $text;
    foreach my $node ($transg->Phenotype) {
        my $content .= td(ObjectLink($node,best_phenotype_name($node))).td({-width=>'50%'},$node->get('Remark')).td(join     (br, map { format_reference(-reference=>$_,-format=>'inline_evidence')} $node->at('Paper_evidence')));

            $text .= TR($content);
 
    }
    my $subsection_text = 'The following phenotypes were observed in this experiment'. table({-border=>1}, TR(th('Phenotype'),th('Remark'),th('Evidence')), $text);

	SubSection('',$subsection_text); ## 

  }
  
  if ($transg->Phenotype_not_observed) {
    StartSection('Phenotype not observed');
  	  #phenotype evidence
    my $text;
    foreach my $node ($transg->Phenotype_not_observed) {
        my $content .= td(ObjectLink($node,best_phenotype_name($node))).td({-width=>'50%'},$node->get('Remark')).td(join     (br, map { format_reference(-reference=>$_,-format=>'inline_evidence')} $node->at('Paper_evidence')));
            $text .= TR($content);
    }

    my $subsection_text .= 'The following phenotypes were <b>NOT</b> observed in this experiment'. table({-border=>1}, TR(th('    Phenotype'),th('Remark'),th('Evidence')), $text);
	SubSection('',$subsection_text);

  }
  

  if ($transg->Rescue) {
    StartSection('Rescue');
    SubSection('' => $transg->Rescue);
  }

  if ($transg->Expr_pattern) {
    StartSection('Expression Pattern');
    SubSection('' => $transg->Expr_pattern);
  }

  if ($transg->Remark) {
    StartSection('Remark');
    SubSection('' => $transg->Remark);
  }
  
  StartSection('References');

  if (my @references = $transg->Reference) {
      
      # Todo: filter by type and provide WBook XREFs
      filter_and_display_references(\@references,'WB',$transg,$transg->class);
      
      SubSection('',
		 format_references(-references => \@references));
  }
 
  if ($transg->Species) {
    StartSection('Species');
    SubSection('' => eval { $transg->Species->name } );
  }
  
  EndDataTable;
}

my $xgene_table_link = hr();
$xgene_table_link .= a({-href=>"/db/gene/transgene_tbls"},"Access tables of transgene markers and mapped transgenes.");

print $xgene_table_link; 

ClosePage;

exit 0;


#sub format_references {
#  my @references = @_;
#  my @links;
#  for my $r (@references) {
#    my $title    = $r->Title;
#    my ($author) = $r->Author;
#    my $year     = $r->Year;
#    my $citation = "$author ($year). $title";
#    push @links,ObjectLink($r,$citation);
#  }
#  @links;
#}

