#!/usr/bin/perl
##############################################################
# REIMPLEMENTATION:                                          #
#    THIS SCRIPT IS NOW FROZEN! (v1.10)                      #
#       Please do not make edits to it.                      #
#       Frozen by: tharris on 02.09.2008                     #   
##############################################################

# Display for "Homology_group" (KOGs)

use strict;
use lib '../lib';
use vars qw/$DB $homology_group/;
use Ace;
use Ace::Browser::AceSubs;
use ElegansSubs qw(:DEFAULT PrintRefs Bestname format_references ID2Species);
use CGI qw/:standard :html3 *table/;

END {
  undef $homology_group;
}

use constant NONE => i('not available');
use constant INPARANOID_URL => 'http://www.wormbase.org/wiki/index.php/Glossary_of_terms#inparanoid';

$DB = OpenDatabase() || AceError("Couldn't open database.");
$DB->class('Ace::Object::Wormbase');

$homology_group = get_object();

PrintTop($homology_group,'Homology_group',($homology_group) ? "Homology Group Report for: $homology_group" : 'Homology Group Report');
print_prompt();
PrintWarning(param('name')) if (param('name') && !$homology_group);

if ($homology_group) {
  general_info();
  cog_code_expansion() if $homology_group->Group_type eq 'COG';
  proteins();
  print end_table();
}

PrintBottom();

exit 0;

sub get_object {
  my $request = param('name');
  $request or return;

  # The most common request: by antibody ID
  my @obj = $DB->fetch('Homology_group' => $request);
  return ($obj[0]) if @obj;
  }

sub general_info {
  print start_table({-border=>1});
  StartSection('General Information');
  SubSection('Title',$homology_group->Title);
  my $type = $homology_group->Group_type;
  if ($type =~ /InParanoid/) {
      $type .= br .GenerateWikiLink('InParanoid',INPARANOID_URL);
  }
  
  SubSection('Type',$type);
  EndSection();
}

# sub code_expansion {
#   
#   
#   
#   if (my @expr_patterns = $antibody->Expr_pattern) {
#     StartSection('Expression Pattern(s)');
#     my %seen;
#     SubSection('',map {
#       my $date = $_->Date || '';
#       ($date) = $date =~ /(\d+) \d+:\d+:\d+$/;
#       my $author = $_->Author || '';
#       my $ref    = $author ? "$author $date" : $_;
#       my $pattern = $_->Pattern || $_->Subcellular_localization || $_->Remark;
#       $pattern    =~ s/^(.{255}).+/$1.../ if length $pattern > 255;
#       $pattern . ObjectLink($_," [For more details see: $ref]")}
# 	       grep {!$seen{$_}++} @expr_patterns);
#     EndSection;
#   }
# }

# sub print_bibliography {
#   StartSection('References');
#   my @references = $antibody->Reference;
#   format_references(-references=>\@references,-format=>'long',-pubmed_link=>'image',-curator=>url_param('curator'));
#   EndSection;
# }

sub print_prompt {
  my $url = url(-absolute=>1) . '?name=';
  print
    start_form,
    p({-class=>'caption'},
	join(' ',
	     'Type in a homology group identifier, e.g. ' . a({-href=>$url . 'KOG0783'},'KOG0783') )),
	p("Identifier: ", textfield(-name=>'name')),
	end_form;
  return;
}

sub cog_code_expansion {
  my $cog_type = $homology_group->COG_type;
  my $cog_code = $homology_group->COG_code;
  
  my ($general_expansion, $specific_expansion) = cog_codes($cog_code);
  
  StartSection('COG Code Information');
  SubSection('COG Type',$cog_type);
  SubSection('COG Code',$cog_code) if $cog_code;
  SubSection('',"(General) $general_expansion") if $general_expansion;
  SubSection('',"(Specific) $specific_expansion") if $specific_expansion;  
  EndSection;
}

sub proteins {
  my @proteins = $homology_group->Protein;

  my $links = Configuration->Protein_links;

  my @protein_details; # Add protein details

  foreach (@proteins) {    
    # Get gene name (non-WB proteins)
    my $name = $_->Gene_name;
    
    # Get gene name (WB proteins)
    unless ($name) {
      my $cds = $_->Corresponding_CDS;
      my $gene = $cds->Gene if $cds;
      $name = $gene->CGC_name if $gene;
      }
    
    # If we have it as a separate object
    my $species = $_->Species || ID2Species($_);
    my $description = $_->Description;
    
    # If this is a wormpep protein, the description will be retrieved from corresponding cds
    unless ($description) {
	my $cds = $_->Corresponding_CDS;
	$description = $cds->DB_remark if $cds;
    }
    
    # Format protein id into a URL
    my $display_name = $name ? "$_ ($name)" : $_;

    my $url;
    if ($_ =~ /(\w+):(.+)/ and exists $links->{$1}) {
	my ($prefix, $accession) = ($1, $2);
	
	# hack for converting CG numbers to FBan numbers, this format needs to be confirmed - 25May05, 9Jul04/PC
	if ($prefix =~ /^flybase/i) { 
	    $accession =~ s/-[\w\-]+$//; 
	    $accession =~ s/^CG//i; 
	    $accession = sprintf("%07d", $accession);
        }
	
	my $link_rule = $links->{$prefix};
	$url = a({-href=>sprintf($link_rule, $accession)}, $display_name);
    } else { 
        # $url = ObjectLink('Protein', $display_name); 
	$url = a({-href=>Object2URL($_)},($name) ? "$_ ($name)" : $_);
    }
    
    push (@protein_details, [$species, $url, $description]);
}
  

  my $table = start_table({-border=>1});
  
  $table .= TR(th(['Species','Protein','Description']));
  
  foreach (@protein_details) {
      my ($species, $protein, $description) = @$_;
      $table .= TR( td($species), td($protein), td($description) );
  }
  $table .= end_table;
  
  StartSection('Protein Details');
  SubSection('',$table);
  EndSection;
}


  
sub cog_codes {
  my ($cog_code) = @_;
  
  my %general_cog_codes = (
    Code_J => 'Information storage and processing',
    Code_A => 'Information storage and processing',
    Code_K => 'Information storage and processing',
    Code_L => 'Information storage and processing',
    Code_B => 'Information storage and processing',
    Code_D => 'Cellular processes and signalling',
    Code_Y => 'Cellular processes and signalling',
    Code_V => 'Cellular processes and signalling',
    Code_T => 'Cellular processes and signalling',
    Code_M => 'Cellular processes and signalling',
    Code_N => 'Cellular processes and signalling',
    Code_Z => 'Cellular processes and signalling',
    Code_W => 'Cellular processes and signalling',
    Code_U => 'Cellular processes and signalling',
    Code_O => 'Cellular processes and signalling',
    Code_C => 'Metabolism',
    Code_G => 'Metabolism',
    Code_E => 'Metabolism',
    Code_F => 'Metabolism',
    Code_H => 'Metabolism',
    Code_I => 'Metabolism',
    Code_P => 'Metabolism',
    Code_Q => 'Metabolism',
    Code_R => 'Poorly characterized',
    Code_S => 'Poorly characterized',
    );
  
  my %specific_cog_codes = (
    Code_J => 'Translation, ribosomal structure and biogenesis',
    Code_A => 'RNA processing and modification',
    Code_K => 'Transcription',
    Code_L => 'Replication, recombination and repair',
    Code_B => 'Chromatin structure and dynamics',
    Code_D => 'Cell cycle control, cell division, chromosome partitioning',
    Code_Y => 'Nuclear structure',
    Code_V => 'Defense mechanisms',
    Code_T => 'Signal transduction mechanisms',
    Code_M => 'Cell wall/membrane/envelope biogenesis',
    Code_N => 'Cell motility',
    Code_Z => 'Cytoskeleton',
    Code_W => 'Extracellular structures',
    Code_U => 'Intracellular trafficking, secretion, and vesicular transport',
    Code_O => 'Posttranslational modification, protein turnover, chaperones',
    Code_C => 'Energy production and conversion',
    Code_G => 'Carbohydrate transport and metabolism',
    Code_E => 'Amino acid transport and metabolism',
    Code_F => 'Nucleotide transport and metabolism',
    Code_H => 'Coenzyme transport and metabolism',
    Code_I => 'Lipid transport and metabolism',
    Code_P => 'Inorganic ion transport and metabolism',
    Code_Q => 'Secondary metabolites biosynthesis, transport and catabolism',
    Code_R => 'General function prediction only',
    Code_S => 'Function unknown',
    );
    
    return ($general_cog_codes{$cog_code}, $specific_cog_codes{$cog_code});
    }
